{"ast":null,"code":"var _jsxFileName = \"E:\\\\AcademicAdvisingSystem\\\\client\\\\src\\\\components\\\\Course.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState, useMemo, useEffect } from \"react\";\nimport { useFormikContext, getIn } from \"formik\";\nimport Table from \"./Table\";\nimport Input from \"./Input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EMPTY_ARR = [];\n\nfunction Course({\n  name,\n  handleAdd,\n  handleRemove\n}) {\n  _s();\n\n  const {\n    values\n  } = useFormikContext(); // from all the form values we only need the \"friends\" part.\n  // we use getIn and not values[name] for the case when name is a path like `social.facebook`\n\n  const formikSlice = getIn(values, name) || EMPTY_ARR;\n  const [tableRows, setTableRows] = useState(formikSlice); // we need this so the table updates after the timeout expires\n\n  useEffect(() => {\n    setTableRows(formikSlice);\n  }, [formikSlice]);\n  const onAdd = useCallback(() => {\n    const newState = [...tableRows];\n    const item = {\n      id: Math.floor(Math.random() * 100) / 10,\n      firstName: \"\",\n      lastName: \"\"\n    };\n    newState.push(item);\n    setTableRows(newState);\n    handleAdd(item);\n  }, [handleAdd, tableRows]);\n  const onRemove = useCallback(index => {\n    const newState = [...tableRows];\n    newState.splice(index, 1);\n    setTableRows(newState);\n    handleRemove(index);\n  }, [handleRemove, tableRows]);\n  const columns = useMemo(() => [{\n    Header: \"Id\",\n    accessor: \"id\"\n  }, {\n    Header: \"First Name\",\n    id: \"firstName\",\n    Cell: ({\n      row: {\n        index\n      }\n    }) => /*#__PURE__*/_jsxDEV(Input, {\n      name: `${name}[${index}].firstName`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 21\n    }, this)\n  }, {\n    Header: \"Last Name\",\n    id: \"lastName\",\n    Cell: ({\n      row: {\n        index\n      }\n    }) => /*#__PURE__*/_jsxDEV(Input, {\n      name: `${name}[${index}].lastName`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 21\n    }, this)\n  }, {\n    Header: \"Actions\",\n    id: \"actions\",\n    Cell: ({\n      row: {\n        index\n      }\n    }) => /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: () => onRemove(index),\n      children: \"delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 21\n    }, this)\n  }], [name, onRemove]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"field\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Friends:\", \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: onAdd,\n        children: \"add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      data: tableRows,\n      columns: columns,\n      rowKey: \"id\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Course, \"Eo/QNPEOtk7lJr0vIh2hDgtVWSI=\", false, function () {\n  return [useFormikContext];\n});\n\n_c = Course;\nexport default _c2 = /*#__PURE__*/React.memo(Course);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Course\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["E:/AcademicAdvisingSystem/client/src/components/Course.js"],"names":["React","useCallback","useState","useMemo","useEffect","useFormikContext","getIn","Table","Input","EMPTY_ARR","Course","name","handleAdd","handleRemove","values","formikSlice","tableRows","setTableRows","onAdd","newState","item","id","Math","floor","random","firstName","lastName","push","onRemove","index","splice","columns","Header","accessor","Cell","row","memo"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useMemo, useEffect } from \"react\";\r\nimport { useFormikContext, getIn } from \"formik\";\r\nimport Table from \"./Table\";\r\nimport Input from \"./Input\";\r\n\r\nconst EMPTY_ARR = [];\r\n\r\nfunction Course({ name, handleAdd, handleRemove }) {\r\n    const { values } = useFormikContext();\r\n\r\n    // from all the form values we only need the \"friends\" part.\r\n    // we use getIn and not values[name] for the case when name is a path like `social.facebook`\r\n    const formikSlice = getIn(values, name) || EMPTY_ARR;\r\n    const [tableRows, setTableRows] = useState(formikSlice);\r\n\r\n    // we need this so the table updates after the timeout expires\r\n    useEffect(() => {\r\n        setTableRows(formikSlice);\r\n    }, [formikSlice]);\r\n\r\n    const onAdd = useCallback(() => {\r\n        const newState = [...tableRows];\r\n        const item = {\r\n            id: Math.floor(Math.random() * 100) / 10,\r\n            firstName: \"\",\r\n            lastName: \"\"\r\n        };\r\n\r\n        newState.push(item);\r\n        setTableRows(newState);\r\n        handleAdd(item);\r\n    }, [handleAdd, tableRows]);\r\n\r\n    const onRemove = useCallback(\r\n        index => {\r\n            const newState = [...tableRows];\r\n\r\n            newState.splice(index, 1);\r\n            setTableRows(newState);\r\n            handleRemove(index);\r\n        },\r\n        [handleRemove, tableRows]\r\n    );\r\n\r\n    const columns = useMemo(\r\n        () => [\r\n            {\r\n                Header: \"Id\",\r\n                accessor: \"id\"\r\n            },\r\n            {\r\n                Header: \"First Name\",\r\n                id: \"firstName\",\r\n                Cell: ({ row: { index } }) => (\r\n                    <Input name={`${name}[${index}].firstName`} />\r\n                )\r\n            },\r\n            {\r\n                Header: \"Last Name\",\r\n                id: \"lastName\",\r\n                Cell: ({ row: { index } }) => (\r\n                    <Input name={`${name}[${index}].lastName`} />\r\n                )\r\n            },\r\n            {\r\n                Header: \"Actions\",\r\n                id: \"actions\",\r\n                Cell: ({ row: { index } }) => (\r\n                    <button type=\"button\" onClick={() => onRemove(index)}>\r\n                        delete\r\n                    </button>\r\n                )\r\n            }\r\n        ],\r\n        [name, onRemove]\r\n    );\r\n\r\n    return (\r\n        <div className=\"field\">\r\n            <div>\r\n                Friends:{\" \"}\r\n                <button type=\"button\" onClick={onAdd}>\r\n                    add\r\n                </button>\r\n            </div>\r\n            <Table data={tableRows} columns={columns} rowKey=\"id\" />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(Course);\r\n"]},"metadata":{},"sourceType":"module"}