{"ast":null,"code":"\"use strict\";\n\nvar _sliceInstanceProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/instance/slice\");\n\nvar _Array$from = require(\"@babel/runtime-corejs3/core-js-stable/array/from\");\n\nvar _Symbol = require(\"@babel/runtime-corejs3/core-js-stable/symbol\");\n\nvar _getIteratorMethod = require(\"@babel/runtime-corejs3/core-js/get-iterator-method\");\n\nvar _Array$isArray = require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\");\n\nvar _getIterator = require(\"@babel/runtime-corejs3/core-js/get-iterator\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports[\"default\"] = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/slicedToArray\"));\n\nvar _flags = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/flags\"));\n\nvar _sort = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/sort\"));\n\nvar _slice = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/slice\"));\n\nvar _parseInt2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/parse-int\"));\n\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\n\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\n\nvar _create = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/create\"));\n\nvar _concat = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/concat\"));\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof _Symbol === \"undefined\" || _getIteratorMethod(o) == null) {\n    if (_Array$isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = _getIterator(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  var _context9;\n\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n\n  var n = _sliceInstanceProperty2(_context9 = Object.prototype.toString.call(o)).call(_context9, 8, -1);\n\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return _Array$from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n/*!\n * XRegExp 5.0.2\n * <xregexp.com>\n * Steven Levithan (c) 2007-present MIT License\n */\n\n/**\n * XRegExp provides augmented, extensible regular expressions. You get additional regex syntax and\n * flags, beyond what browsers support natively. XRegExp is also a regex utility belt with tools to\n * make your client-side grepping simpler and more powerful, while freeing you from related\n * cross-browser inconsistencies.\n */\n// ==--------------------------==\n// Private stuff\n// ==--------------------------==\n// Property name used for extended regex instance data\n\n\nvar REGEX_DATA = 'xregexp'; // Optional features that can be installed and uninstalled\n\nvar features = {\n  astral: false,\n  namespacing: true\n}; // Storage for fixed/extended native methods\n\nvar fixed = {}; // Storage for regexes cached by `XRegExp.cache`\n\nvar regexCache = {}; // Storage for pattern details cached by the `XRegExp` constructor\n\nvar patternCache = {}; // Storage for regex syntax tokens added internally or by `XRegExp.addToken`\n\nvar tokens = []; // Token scopes\n\nvar defaultScope = 'default';\nvar classScope = 'class'; // Regexes that match native regex syntax, including octals\n\nvar nativeTokens = {\n  // Any native multicharacter token in default scope, or any single character\n  'default': /\\\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9]\\d*|x[\\dA-Fa-f]{2}|u(?:[\\dA-Fa-f]{4}|{[\\dA-Fa-f]+})|c[A-Za-z]|[\\s\\S])|\\(\\?(?:[:=!]|<[=!])|[?*+]\\?|{\\d+(?:,\\d*)?}\\??|[\\s\\S]/,\n  // Any native multicharacter token in character class scope, or any single character\n  'class': /\\\\(?:[0-3][0-7]{0,2}|[4-7][0-7]?|x[\\dA-Fa-f]{2}|u(?:[\\dA-Fa-f]{4}|{[\\dA-Fa-f]+})|c[A-Za-z]|[\\s\\S])|[\\s\\S]/\n}; // Any backreference or dollar-prefixed character in replacement strings\n\nvar replacementToken = /\\$(?:\\{([^\\}]+)\\}|<([^>]+)>|(\\d\\d?|[\\s\\S]?))/g; // Check for correct `exec` handling of nonparticipating capturing groups\n\nvar correctExecNpcg = /()??/.exec('')[1] === undefined; // Check for ES6 `flags` prop support\n\nvar hasFlagsProp = (0, _flags[\"default\"])(/x/) !== undefined;\n\nfunction hasNativeFlag(flag) {\n  // Can't check based on the presence of properties/getters since browsers might support such\n  // properties even when they don't support the corresponding flag in regex construction (tested\n  // in Chrome 48, where `'unicode' in /x/` is true but trying to construct a regex with flag `u`\n  // throws an error)\n  var isSupported = true;\n\n  try {\n    // Can't use regex literals for testing even in a `try` because regex literals with\n    // unsupported flags cause a compilation error in IE\n    new RegExp('', flag); // Work around a broken/incomplete IE11 polyfill for sticky introduced in core-js 3.6.0\n\n    if (flag === 'y') {\n      // Using function to avoid babel transform to regex literal\n      var gy = function () {\n        return 'gy';\n      }();\n\n      var incompleteY = '.a'.replace(new RegExp('a', gy), '.') === '..';\n\n      if (incompleteY) {\n        isSupported = false;\n      }\n    }\n  } catch (exception) {\n    isSupported = false;\n  }\n\n  return isSupported;\n} // Check for ES2018 `s` flag support\n\n\nvar hasNativeS = hasNativeFlag('s'); // Check for ES6 `u` flag support\n\nvar hasNativeU = hasNativeFlag('u'); // Check for ES6 `y` flag support\n\nvar hasNativeY = hasNativeFlag('y'); // Tracker for known flags, including addon flags\n\nvar registeredFlags = {\n  g: true,\n  i: true,\n  m: true,\n  s: hasNativeS,\n  u: hasNativeU,\n  y: hasNativeY\n}; // Flags to remove when passing to native `RegExp` constructor\n\nvar nonnativeFlags = hasNativeS ? /[^gimsuy]+/g : /[^gimuy]+/g;\n/**\n * Attaches extended data and `XRegExp.prototype` properties to a regex object.\n *\n * @private\n * @param {RegExp} regex Regex to augment.\n * @param {Array} captureNames Array with capture names, or `null`.\n * @param {String} xSource XRegExp pattern used to generate `regex`, or `null` if N/A.\n * @param {String} xFlags XRegExp flags used to generate `regex`, or `null` if N/A.\n * @param {Boolean} [isInternalOnly=false] Whether the regex will be used only for internal\n *   operations, and never exposed to users. For internal-only regexes, we can improve perf by\n *   skipping some operations like attaching `XRegExp.prototype` properties.\n * @returns {!RegExp} Augmented regex.\n */\n\nfunction augment(regex, captureNames, xSource, xFlags, isInternalOnly) {\n  var _context;\n\n  regex[REGEX_DATA] = {\n    captureNames: captureNames\n  };\n\n  if (isInternalOnly) {\n    return regex;\n  } // Can't auto-inherit these since the XRegExp constructor returns a nonprimitive value\n\n\n  if (regex.__proto__) {\n    regex.__proto__ = XRegExp.prototype;\n  } else {\n    for (var p in XRegExp.prototype) {\n      // An `XRegExp.prototype.hasOwnProperty(p)` check wouldn't be worth it here, since this\n      // is performance sensitive, and enumerable `Object.prototype` or `RegExp.prototype`\n      // extensions exist on `regex.prototype` anyway\n      regex[p] = XRegExp.prototype[p];\n    }\n  }\n\n  regex[REGEX_DATA].source = xSource; // Emulate the ES6 `flags` prop by ensuring flags are in alphabetical order\n\n  regex[REGEX_DATA].flags = xFlags ? (0, _sort[\"default\"])(_context = xFlags.split('')).call(_context).join('') : xFlags;\n  return regex;\n}\n/**\n * Removes any duplicate characters from the provided string.\n *\n * @private\n * @param {String} str String to remove duplicate characters from.\n * @returns {string} String with any duplicate characters removed.\n */\n\n\nfunction clipDuplicates(str) {\n  return str.replace(/([\\s\\S])(?=[\\s\\S]*\\1)/g, '');\n}\n/**\n * Copies a regex object while preserving extended data and augmenting with `XRegExp.prototype`\n * properties. The copy has a fresh `lastIndex` property (set to zero). Allows adding and removing\n * flags g and y while copying the regex.\n *\n * @private\n * @param {RegExp} regex Regex to copy.\n * @param {Object} [options] Options object with optional properties:\n *   - `addG` {Boolean} Add flag g while copying the regex.\n *   - `addY` {Boolean} Add flag y while copying the regex.\n *   - `removeG` {Boolean} Remove flag g while copying the regex.\n *   - `removeY` {Boolean} Remove flag y while copying the regex.\n *   - `isInternalOnly` {Boolean} Whether the copied regex will be used only for internal\n *     operations, and never exposed to users. For internal-only regexes, we can improve perf by\n *     skipping some operations like attaching `XRegExp.prototype` properties.\n *   - `source` {String} Overrides `<regex>.source`, for special cases.\n * @returns {RegExp} Copy of the provided regex, possibly with modified flags.\n */\n\n\nfunction copyRegex(regex, options) {\n  var _context2;\n\n  if (!XRegExp.isRegExp(regex)) {\n    throw new TypeError('Type RegExp expected');\n  }\n\n  var xData = regex[REGEX_DATA] || {};\n  var flags = getNativeFlags(regex);\n  var flagsToAdd = '';\n  var flagsToRemove = '';\n  var xregexpSource = null;\n  var xregexpFlags = null;\n  options = options || {};\n\n  if (options.removeG) {\n    flagsToRemove += 'g';\n  }\n\n  if (options.removeY) {\n    flagsToRemove += 'y';\n  }\n\n  if (flagsToRemove) {\n    flags = flags.replace(new RegExp(\"[\".concat(flagsToRemove, \"]+\"), 'g'), '');\n  }\n\n  if (options.addG) {\n    flagsToAdd += 'g';\n  }\n\n  if (options.addY) {\n    flagsToAdd += 'y';\n  }\n\n  if (flagsToAdd) {\n    flags = clipDuplicates(flags + flagsToAdd);\n  }\n\n  if (!options.isInternalOnly) {\n    if (xData.source !== undefined) {\n      xregexpSource = xData.source;\n    } // null or undefined; don't want to add to `flags` if the previous value was null, since\n    // that indicates we're not tracking original precompilation flags\n\n\n    if ((0, _flags[\"default\"])(xData) != null) {\n      // Flags are only added for non-internal regexes by `XRegExp.globalize`. Flags are never\n      // removed for non-internal regexes, so don't need to handle it\n      xregexpFlags = flagsToAdd ? clipDuplicates((0, _flags[\"default\"])(xData) + flagsToAdd) : (0, _flags[\"default\"])(xData);\n    }\n  } // Augment with `XRegExp.prototype` properties, but use the native `RegExp` constructor to avoid\n  // searching for special tokens. That would be wrong for regexes constructed by `RegExp`, and\n  // unnecessary for regexes constructed by `XRegExp` because the regex has already undergone the\n  // translation to native regex syntax\n\n\n  regex = augment(new RegExp(options.source || regex.source, flags), hasNamedCapture(regex) ? (0, _slice[\"default\"])(_context2 = xData.captureNames).call(_context2, 0) : null, xregexpSource, xregexpFlags, options.isInternalOnly);\n  return regex;\n}\n/**\n * Converts hexadecimal to decimal.\n *\n * @private\n * @param {String} hex\n * @returns {number}\n */\n\n\nfunction dec(hex) {\n  return (0, _parseInt2[\"default\"])(hex, 16);\n}\n/**\n * Returns a pattern that can be used in a native RegExp in place of an ignorable token such as an\n * inline comment or whitespace with flag x. This is used directly as a token handler function\n * passed to `XRegExp.addToken`.\n *\n * @private\n * @param {String} match Match arg of `XRegExp.addToken` handler\n * @param {String} scope Scope arg of `XRegExp.addToken` handler\n * @param {String} flags Flags arg of `XRegExp.addToken` handler\n * @returns {string} Either '' or '(?:)', depending on which is needed in the context of the match.\n */\n\n\nfunction getContextualTokenSeparator(match, scope, flags) {\n  var matchEndPos = match.index + match[0].length;\n  var precedingChar = match.input[match.index - 1];\n  var followingChar = match.input[matchEndPos];\n\n  if ( // No need to separate tokens if at the beginning or end of a group, before or after a\n  // group, or before or after a `|`\n  /^[()|]$/.test(precedingChar) || /^[()|]$/.test(followingChar) || // No need to separate tokens if at the beginning or end of the pattern\n  match.index === 0 || matchEndPos === match.input.length || // No need to separate tokens if at the beginning of a noncapturing group or lookaround.\n  // Looks only at the last 4 chars (at most) for perf when constructing long regexes.\n  /\\(\\?(?:[:=!]|<[=!])$/.test(match.input.substring(match.index - 4, match.index)) || // Avoid separating tokens when the following token is a quantifier\n  isQuantifierNext(match.input, matchEndPos, flags)) {\n    return '';\n  } // Keep tokens separated. This avoids e.g. inadvertedly changing `\\1 1` or `\\1(?#)1` to `\\11`.\n  // This also ensures all tokens remain as discrete atoms, e.g. it prevents converting the\n  // syntax error `(? :` into `(?:`.\n\n\n  return '(?:)';\n}\n/**\n * Returns native `RegExp` flags used by a regex object.\n *\n * @private\n * @param {RegExp} regex Regex to check.\n * @returns {string} Native flags in use.\n */\n\n\nfunction getNativeFlags(regex) {\n  return hasFlagsProp ? (0, _flags[\"default\"])(regex) : // Explicitly using `RegExp.prototype.toString` (rather than e.g. `String` or concatenation\n  // with an empty string) allows this to continue working predictably when\n  // `XRegExp.proptotype.toString` is overridden\n  /\\/([a-z]*)$/i.exec(RegExp.prototype.toString.call(regex))[1];\n}\n/**\n * Determines whether a regex has extended instance data used to track capture names.\n *\n * @private\n * @param {RegExp} regex Regex to check.\n * @returns {boolean} Whether the regex uses named capture.\n */\n\n\nfunction hasNamedCapture(regex) {\n  return !!(regex[REGEX_DATA] && regex[REGEX_DATA].captureNames);\n}\n/**\n * Converts decimal to hexadecimal.\n *\n * @private\n * @param {Number|String} dec\n * @returns {string}\n */\n\n\nfunction hex(dec) {\n  return (0, _parseInt2[\"default\"])(dec, 10).toString(16);\n}\n/**\n * Checks whether the next nonignorable token after the specified position is a quantifier.\n *\n * @private\n * @param {String} pattern Pattern to search within.\n * @param {Number} pos Index in `pattern` to search at.\n * @param {String} flags Flags used by the pattern.\n * @returns {Boolean} Whether the next nonignorable token is a quantifier.\n */\n\n\nfunction isQuantifierNext(pattern, pos, flags) {\n  var inlineCommentPattern = '\\\\(\\\\?#[^)]*\\\\)';\n  var lineCommentPattern = '#[^#\\\\n]*';\n  var quantifierPattern = '[?*+]|{\\\\d+(?:,\\\\d*)?}';\n  var regex = (0, _indexOf[\"default\"])(flags).call(flags, 'x') !== -1 ? // Ignore any leading whitespace, line comments, and inline comments\n  /^(?:\\s|#[^#\\n]*|\\(\\?#[^)]*\\))*(?:[?*+]|{\\d+(?:,\\d*)?})/ : // Ignore any leading inline comments\n  /^(?:\\(\\?#[^)]*\\))*(?:[?*+]|{\\d+(?:,\\d*)?})/;\n  return regex.test((0, _slice[\"default\"])(pattern).call(pattern, pos));\n}\n/**\n * Determines whether a value is of the specified type, by resolving its internal [[Class]].\n *\n * @private\n * @param {*} value Object to check.\n * @param {String} type Type to check for, in TitleCase.\n * @returns {boolean} Whether the object matches the type.\n */\n\n\nfunction isType(value, type) {\n  return Object.prototype.toString.call(value) === \"[object \".concat(type, \"]\");\n}\n/**\n * Returns the object, or throws an error if it is `null` or `undefined`. This is used to follow\n * the ES5 abstract operation `ToObject`.\n *\n * @private\n * @param {*} value Object to check and return.\n * @returns {*} The provided object.\n */\n\n\nfunction nullThrows(value) {\n  // null or undefined\n  if (value == null) {\n    throw new TypeError('Cannot convert null or undefined to object');\n  }\n\n  return value;\n}\n/**\n * Adds leading zeros if shorter than four characters. Used for fixed-length hexadecimal values.\n *\n * @private\n * @param {String} str\n * @returns {string}\n */\n\n\nfunction pad4(str) {\n  while (str.length < 4) {\n    str = \"0\".concat(str);\n  }\n\n  return str;\n}\n/**\n * Checks for flag-related errors, and strips/applies flags in a leading mode modifier. Offloads\n * the flag preparation logic from the `XRegExp` constructor.\n *\n * @private\n * @param {String} pattern Regex pattern, possibly with a leading mode modifier.\n * @param {String} flags Any combination of flags.\n * @returns {!Object} Object with properties `pattern` and `flags`.\n */\n\n\nfunction prepareFlags(pattern, flags) {\n  // Recent browsers throw on duplicate flags, so copy this behavior for nonnative flags\n  if (clipDuplicates(flags) !== flags) {\n    throw new SyntaxError(\"Invalid duplicate regex flag \".concat(flags));\n  } // Strip and apply a leading mode modifier with any combination of flags except g or y\n\n\n  pattern = pattern.replace(/^\\(\\?([\\w$]+)\\)/, function ($0, $1) {\n    if (/[gy]/.test($1)) {\n      throw new SyntaxError(\"Cannot use flag g or y in mode modifier \".concat($0));\n    } // Allow duplicate flags within the mode modifier\n\n\n    flags = clipDuplicates(flags + $1);\n    return '';\n  }); // Throw on unknown native or nonnative flags\n\n  var _iterator = _createForOfIteratorHelper(flags),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var flag = _step.value;\n\n      if (!registeredFlags[flag]) {\n        throw new SyntaxError(\"Unknown regex flag \".concat(flag));\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return {\n    pattern: pattern,\n    flags: flags\n  };\n}\n/**\n * Prepares an options object from the given value.\n *\n * @private\n * @param {String|Object} value Value to convert to an options object.\n * @returns {Object} Options object.\n */\n\n\nfunction prepareOptions(value) {\n  var options = {};\n\n  if (isType(value, 'String')) {\n    (0, _forEach[\"default\"])(XRegExp).call(XRegExp, value, /[^\\s,]+/, function (match) {\n      options[match] = true;\n    });\n    return options;\n  }\n\n  return value;\n}\n/**\n * Registers a flag so it doesn't throw an 'unknown flag' error.\n *\n * @private\n * @param {String} flag Single-character flag to register.\n */\n\n\nfunction registerFlag(flag) {\n  if (!/^[\\w$]$/.test(flag)) {\n    throw new Error('Flag must be a single character A-Za-z0-9_$');\n  }\n\n  registeredFlags[flag] = true;\n}\n/**\n * Runs built-in and custom regex syntax tokens in reverse insertion order at the specified\n * position, until a match is found.\n *\n * @private\n * @param {String} pattern Original pattern from which an XRegExp object is being built.\n * @param {String} flags Flags being used to construct the regex.\n * @param {Number} pos Position to search for tokens within `pattern`.\n * @param {Number} scope Regex scope to apply: 'default' or 'class'.\n * @param {Object} context Context object to use for token handler functions.\n * @returns {Object} Object with properties `matchLength`, `output`, and `reparse`; or `null`.\n */\n\n\nfunction runTokens(pattern, flags, pos, scope, context) {\n  var i = tokens.length;\n  var leadChar = pattern[pos];\n  var result = null;\n  var match;\n  var t; // Run in reverse insertion order\n\n  while (i--) {\n    t = tokens[i];\n\n    if (t.leadChar && t.leadChar !== leadChar || t.scope !== scope && t.scope !== 'all' || t.flag && !((0, _indexOf[\"default\"])(flags).call(flags, t.flag) !== -1)) {\n      continue;\n    }\n\n    match = XRegExp.exec(pattern, t.regex, pos, 'sticky');\n\n    if (match) {\n      result = {\n        matchLength: match[0].length,\n        output: t.handler.call(context, match, scope, flags),\n        reparse: t.reparse\n      }; // Finished with token tests\n\n      break;\n    }\n  }\n\n  return result;\n}\n/**\n * Enables or disables implicit astral mode opt-in. When enabled, flag A is automatically added to\n * all new regexes created by XRegExp. This causes an error to be thrown when creating regexes if\n * the Unicode Base addon is not available, since flag A is registered by that addon.\n *\n * @private\n * @param {Boolean} on `true` to enable; `false` to disable.\n */\n\n\nfunction setAstral(on) {\n  features.astral = on;\n}\n/**\n * Adds named capture groups to the `groups` property of match arrays. See here for details:\n * https://github.com/tc39/proposal-regexp-named-groups\n *\n * @private\n * @param {Boolean} on `true` to enable; `false` to disable.\n */\n\n\nfunction setNamespacing(on) {\n  features.namespacing = on;\n} // ==--------------------------==\n// Constructor\n// ==--------------------------==\n\n/**\n * Creates an extended regular expression object for matching text with a pattern. Differs from a\n * native regular expression in that additional syntax and flags are supported. The returned object\n * is in fact a native `RegExp` and works with all native methods.\n *\n * @class XRegExp\n * @constructor\n * @param {String|RegExp} pattern Regex pattern string, or an existing regex object to copy.\n * @param {String} [flags] Any combination of flags.\n *   Native flags:\n *     - `g` - global\n *     - `i` - ignore case\n *     - `m` - multiline anchors\n *     - `u` - unicode (ES6)\n *     - `y` - sticky (Firefox 3+, ES6)\n *   Additional XRegExp flags:\n *     - `n` - explicit capture\n *     - `s` - dot matches all (aka singleline) - works even when not natively supported\n *     - `x` - free-spacing and line comments (aka extended)\n *     - `A` - astral (requires the Unicode Base addon)\n *   Flags cannot be provided when constructing one `RegExp` from another.\n * @returns {RegExp} Extended regular expression object.\n * @example\n *\n * // With named capture and flag x\n * XRegExp(`(?<year>  [0-9]{4} ) -?  # year\n *          (?<month> [0-9]{2} ) -?  # month\n *          (?<day>   [0-9]{2} )     # day`, 'x');\n *\n * // Providing a regex object copies it. Native regexes are recompiled using native (not XRegExp)\n * // syntax. Copies maintain extended data, are augmented with `XRegExp.prototype` properties, and\n * // have fresh `lastIndex` properties (set to zero).\n * XRegExp(/regex/);\n */\n\n\nfunction XRegExp(pattern, flags) {\n  if (XRegExp.isRegExp(pattern)) {\n    if (flags !== undefined) {\n      throw new TypeError('Cannot supply flags when copying a RegExp');\n    }\n\n    return copyRegex(pattern);\n  } // Copy the argument behavior of `RegExp`\n\n\n  pattern = pattern === undefined ? '' : String(pattern);\n  flags = flags === undefined ? '' : String(flags);\n\n  if (XRegExp.isInstalled('astral') && !((0, _indexOf[\"default\"])(flags).call(flags, 'A') !== -1)) {\n    // This causes an error to be thrown if the Unicode Base addon is not available\n    flags += 'A';\n  }\n\n  if (!patternCache[pattern]) {\n    patternCache[pattern] = {};\n  }\n\n  if (!patternCache[pattern][flags]) {\n    var context = {\n      hasNamedCapture: false,\n      captureNames: []\n    };\n    var scope = defaultScope;\n    var output = '';\n    var pos = 0;\n    var result; // Check for flag-related errors, and strip/apply flags in a leading mode modifier\n\n    var applied = prepareFlags(pattern, flags);\n    var appliedPattern = applied.pattern;\n    var appliedFlags = (0, _flags[\"default\"])(applied); // Use XRegExp's tokens to translate the pattern to a native regex pattern.\n    // `appliedPattern.length` may change on each iteration if tokens use `reparse`\n\n    while (pos < appliedPattern.length) {\n      do {\n        // Check for custom tokens at the current position\n        result = runTokens(appliedPattern, appliedFlags, pos, scope, context); // If the matched token used the `reparse` option, splice its output into the\n        // pattern before running tokens again at the same position\n\n        if (result && result.reparse) {\n          appliedPattern = (0, _slice[\"default\"])(appliedPattern).call(appliedPattern, 0, pos) + result.output + (0, _slice[\"default\"])(appliedPattern).call(appliedPattern, pos + result.matchLength);\n        }\n      } while (result && result.reparse);\n\n      if (result) {\n        output += result.output;\n        pos += result.matchLength || 1;\n      } else {\n        // Get the native token at the current position\n        var _XRegExp$exec = XRegExp.exec(appliedPattern, nativeTokens[scope], pos, 'sticky'),\n            _XRegExp$exec2 = (0, _slicedToArray2[\"default\"])(_XRegExp$exec, 1),\n            token = _XRegExp$exec2[0];\n\n        output += token;\n        pos += token.length;\n\n        if (token === '[' && scope === defaultScope) {\n          scope = classScope;\n        } else if (token === ']' && scope === classScope) {\n          scope = defaultScope;\n        }\n      }\n    }\n\n    patternCache[pattern][flags] = {\n      // Use basic cleanup to collapse repeated empty groups like `(?:)(?:)` to `(?:)`. Empty\n      // groups are sometimes inserted during regex transpilation in order to keep tokens\n      // separated. However, more than one empty group in a row is never needed.\n      pattern: output.replace(/(?:\\(\\?:\\))+/g, '(?:)'),\n      // Strip all but native flags\n      flags: appliedFlags.replace(nonnativeFlags, ''),\n      // `context.captureNames` has an item for each capturing group, even if unnamed\n      captures: context.hasNamedCapture ? context.captureNames : null\n    };\n  }\n\n  var generated = patternCache[pattern][flags];\n  return augment(new RegExp(generated.pattern, (0, _flags[\"default\"])(generated)), generated.captures, pattern, flags);\n} // Add `RegExp.prototype` to the prototype chain\n\n\nXRegExp.prototype = /(?:)/; // ==--------------------------==\n// Public properties\n// ==--------------------------==\n\n/**\n * The XRegExp version number as a string containing three dot-separated parts. For example,\n * '2.0.0-beta-3'.\n *\n * @static\n * @memberOf XRegExp\n * @type String\n */\n\nXRegExp.version = '5.0.2'; // ==--------------------------==\n// Public methods\n// ==--------------------------==\n// Intentionally undocumented; used in tests and addons\n\nXRegExp._clipDuplicates = clipDuplicates;\nXRegExp._hasNativeFlag = hasNativeFlag;\nXRegExp._dec = dec;\nXRegExp._hex = hex;\nXRegExp._pad4 = pad4;\n/**\n * Extends XRegExp syntax and allows custom flags. This is used internally and can be used to\n * create XRegExp addons. If more than one token can match the same string, the last added wins.\n *\n * @memberOf XRegExp\n * @param {RegExp} regex Regex object that matches the new token.\n * @param {Function} handler Function that returns a new pattern string (using native regex syntax)\n *   to replace the matched token within all future XRegExp regexes. Has access to persistent\n *   properties of the regex being built, through `this`. Invoked with three arguments:\n *   - The match array, with named backreference properties.\n *   - The regex scope where the match was found: 'default' or 'class'.\n *   - The flags used by the regex, including any flags in a leading mode modifier.\n *   The handler function becomes part of the XRegExp construction process, so be careful not to\n *   construct XRegExps within the function or you will trigger infinite recursion.\n * @param {Object} [options] Options object with optional properties:\n *   - `scope` {String} Scope where the token applies: 'default', 'class', or 'all'.\n *   - `flag` {String} Single-character flag that triggers the token. This also registers the\n *     flag, which prevents XRegExp from throwing an 'unknown flag' error when the flag is used.\n *   - `optionalFlags` {String} Any custom flags checked for within the token `handler` that are\n *     not required to trigger the token. This registers the flags, to prevent XRegExp from\n *     throwing an 'unknown flag' error when any of the flags are used.\n *   - `reparse` {Boolean} Whether the `handler` function's output should not be treated as\n *     final, and instead be reparseable by other tokens (including the current token). Allows\n *     token chaining or deferring.\n *   - `leadChar` {String} Single character that occurs at the beginning of any successful match\n *     of the token (not always applicable). This doesn't change the behavior of the token unless\n *     you provide an erroneous value. However, providing it can increase the token's performance\n *     since the token can be skipped at any positions where this character doesn't appear.\n * @example\n *\n * // Basic usage: Add \\a for the ALERT control code\n * XRegExp.addToken(\n *   /\\\\a/,\n *   () => '\\\\x07',\n *   {scope: 'all'}\n * );\n * XRegExp('\\\\a[\\\\a-\\\\n]+').test('\\x07\\n\\x07'); // -> true\n *\n * // Add the U (ungreedy) flag from PCRE and RE2, which reverses greedy and lazy quantifiers.\n * // Since `scope` is not specified, it uses 'default' (i.e., transformations apply outside of\n * // character classes only)\n * XRegExp.addToken(\n *   /([?*+]|{\\d+(?:,\\d*)?})(\\??)/,\n *   (match) => `${match[1]}${match[2] ? '' : '?'}`,\n *   {flag: 'U'}\n * );\n * XRegExp('a+', 'U').exec('aaa')[0]; // -> 'a'\n * XRegExp('a+?', 'U').exec('aaa')[0]; // -> 'aaa'\n */\n\nXRegExp.addToken = function (regex, handler, options) {\n  options = options || {};\n  var _options = options,\n      optionalFlags = _options.optionalFlags;\n\n  if (options.flag) {\n    registerFlag(options.flag);\n  }\n\n  if (optionalFlags) {\n    optionalFlags = optionalFlags.split('');\n\n    var _iterator2 = _createForOfIteratorHelper(optionalFlags),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var flag = _step2.value;\n        registerFlag(flag);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  } // Add to the private list of syntax tokens\n\n\n  tokens.push({\n    regex: copyRegex(regex, {\n      addG: true,\n      addY: hasNativeY,\n      isInternalOnly: true\n    }),\n    handler: handler,\n    scope: options.scope || defaultScope,\n    flag: options.flag,\n    reparse: options.reparse,\n    leadChar: options.leadChar\n  }); // Reset the pattern cache used by the `XRegExp` constructor, since the same pattern and flags\n  // might now produce different results\n\n  XRegExp.cache.flush('patterns');\n};\n/**\n * Caches and returns the result of calling `XRegExp(pattern, flags)`. On any subsequent call with\n * the same pattern and flag combination, the cached copy of the regex is returned.\n *\n * @memberOf XRegExp\n * @param {String} pattern Regex pattern string.\n * @param {String} [flags] Any combination of XRegExp flags.\n * @returns {RegExp} Cached XRegExp object.\n * @example\n *\n * let match;\n * while (match = XRegExp.cache('.', 'gs').exec('abc')) {\n *   // The regex is compiled once only\n * }\n */\n\n\nXRegExp.cache = function (pattern, flags) {\n  if (!regexCache[pattern]) {\n    regexCache[pattern] = {};\n  }\n\n  return regexCache[pattern][flags] || (regexCache[pattern][flags] = XRegExp(pattern, flags));\n}; // Intentionally undocumented; used in tests\n\n\nXRegExp.cache.flush = function (cacheName) {\n  if (cacheName === 'patterns') {\n    // Flush the pattern cache used by the `XRegExp` constructor\n    patternCache = {};\n  } else {\n    // Flush the regex cache populated by `XRegExp.cache`\n    regexCache = {};\n  }\n};\n/**\n * Escapes any regular expression metacharacters, for use when matching literal strings. The result\n * can safely be used at any position within a regex that uses any flags.\n *\n * @memberOf XRegExp\n * @param {String} str String to escape.\n * @returns {string} String with regex metacharacters escaped.\n * @example\n *\n * XRegExp.escape('Escaped? <.>');\n * // -> 'Escaped\\?\\u0020<\\.>'\n */\n// Following are the contexts where each metacharacter needs to be escaped because it would\n// otherwise have a special meaning, change the meaning of surrounding characters, or cause an\n// error. Context 'default' means outside character classes only.\n// - `\\` - context: all\n// - `[()*+?.$|` - context: default\n// - `]` - context: default with flag u or if forming the end of a character class\n// - `{}` - context: default with flag u or if part of a valid/complete quantifier pattern\n// - `,` - context: default if in a position that causes an unescaped `{` to turn into a quantifier.\n//   Ex: `/^a{1\\,2}$/` matches `'a{1,2}'`, but `/^a{1,2}$/` matches `'a'` or `'aa'`\n// - `#` and <whitespace> - context: default with flag x\n// - `^` - context: default, and context: class if it's the first character in the class\n// - `-` - context: class if part of a valid character class range\n\n\nXRegExp.escape = function (str) {\n  return String(nullThrows(str)). // Escape most special chars with a backslash\n  replace(/[\\\\\\[\\]{}()*+?.^$|]/g, '\\\\$&'). // Convert to \\uNNNN for special chars that can't be escaped when used with ES6 flag `u`\n  replace(/[\\s#\\-,]/g, function (match) {\n    return \"\\\\u\".concat(pad4(hex(match.charCodeAt(0))));\n  });\n};\n/**\n * Executes a regex search in a specified string. Returns a match array or `null`. If the provided\n * regex uses named capture, named capture properties are included on the match array's `groups`\n * property. Optional `pos` and `sticky` arguments specify the search start position, and whether\n * the match must start at the specified position only. The `lastIndex` property of the provided\n * regex is not used, but is updated for compatibility. Also fixes browser bugs compared to the\n * native `RegExp.prototype.exec` and can be used reliably cross-browser.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {RegExp} regex Regex to search with.\n * @param {Number} [pos=0] Zero-based index at which to start the search.\n * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position\n *   only. The string `'sticky'` is accepted as an alternative to `true`.\n * @returns {Array} Match array with named capture properties on the `groups` object, or `null`. If\n *   the `namespacing` feature is off, named capture properties are directly on the match array.\n * @example\n *\n * // Basic use, with named capturing group\n * let match = XRegExp.exec('U+2620', XRegExp('U\\\\+(?<hex>[0-9A-F]{4})'));\n * match.groups.hex; // -> '2620'\n *\n * // With pos and sticky, in a loop\n * let pos = 2, result = [], match;\n * while (match = XRegExp.exec('<1><2><3><4>5<6>', /<(\\d)>/, pos, 'sticky')) {\n *   result.push(match[1]);\n *   pos = match.index + match[0].length;\n * }\n * // result -> ['2', '3', '4']\n */\n\n\nXRegExp.exec = function (str, regex, pos, sticky) {\n  var cacheKey = 'g';\n  var addY = false;\n  var fakeY = false;\n  var match;\n  addY = hasNativeY && !!(sticky || regex.sticky && sticky !== false);\n\n  if (addY) {\n    cacheKey += 'y';\n  } else if (sticky) {\n    // Simulate sticky matching by appending an empty capture to the original regex. The\n    // resulting regex will succeed no matter what at the current index (set with `lastIndex`),\n    // and will not search the rest of the subject string. We'll know that the original regex\n    // has failed if that last capture is `''` rather than `undefined` (i.e., if that last\n    // capture participated in the match).\n    fakeY = true;\n    cacheKey += 'FakeY';\n  }\n\n  regex[REGEX_DATA] = regex[REGEX_DATA] || {}; // Shares cached copies with `XRegExp.match`/`replace`\n\n  var r2 = regex[REGEX_DATA][cacheKey] || (regex[REGEX_DATA][cacheKey] = copyRegex(regex, {\n    addG: true,\n    addY: addY,\n    source: fakeY ? \"\".concat(regex.source, \"|()\") : undefined,\n    removeY: sticky === false,\n    isInternalOnly: true\n  }));\n  pos = pos || 0;\n  r2.lastIndex = pos; // Fixed `exec` required for `lastIndex` fix, named backreferences, etc.\n\n  match = fixed.exec.call(r2, str); // Get rid of the capture added by the pseudo-sticky matcher if needed. An empty string means\n  // the original regexp failed (see above).\n\n  if (fakeY && match && match.pop() === '') {\n    match = null;\n  }\n\n  if (regex.global) {\n    regex.lastIndex = match ? r2.lastIndex : 0;\n  }\n\n  return match;\n};\n/**\n * Executes a provided function once per regex match. Searches always start at the beginning of the\n * string and continue until the end, regardless of the state of the regex's `global` property and\n * initial `lastIndex`.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {RegExp} regex Regex to search with.\n * @param {Function} callback Function to execute for each match. Invoked with four arguments:\n *   - The match array, with named backreference properties.\n *   - The zero-based match index.\n *   - The string being traversed.\n *   - The regex object being used to traverse the string.\n * @example\n *\n * // Extracts every other digit from a string\n * const evens = [];\n * XRegExp.forEach('1a2345', /\\d/, (match, i) => {\n *   if (i % 2) evens.push(+match[0]);\n * });\n * // evens -> [2, 4]\n */\n\n\nXRegExp.forEach = function (str, regex, callback) {\n  var pos = 0;\n  var i = -1;\n  var match;\n\n  while (match = XRegExp.exec(str, regex, pos)) {\n    // Because `regex` is provided to `callback`, the function could use the deprecated/\n    // nonstandard `RegExp.prototype.compile` to mutate the regex. However, since `XRegExp.exec`\n    // doesn't use `lastIndex` to set the search position, this can't lead to an infinite loop,\n    // at least. Actually, because of the way `XRegExp.exec` caches globalized versions of\n    // regexes, mutating the regex will not have any effect on the iteration or matched strings,\n    // which is a nice side effect that brings extra safety.\n    callback(match, ++i, str, regex);\n    pos = match.index + (match[0].length || 1);\n  }\n};\n/**\n * Copies a regex object and adds flag `g`. The copy maintains extended data, is augmented with\n * `XRegExp.prototype` properties, and has a fresh `lastIndex` property (set to zero). Native\n * regexes are not recompiled using XRegExp syntax.\n *\n * @memberOf XRegExp\n * @param {RegExp} regex Regex to globalize.\n * @returns {RegExp} Copy of the provided regex with flag `g` added.\n * @example\n *\n * const globalCopy = XRegExp.globalize(/regex/);\n * globalCopy.global; // -> true\n */\n\n\nXRegExp.globalize = function (regex) {\n  return copyRegex(regex, {\n    addG: true\n  });\n};\n/**\n * Installs optional features according to the specified options. Can be undone using\n * `XRegExp.uninstall`.\n *\n * @memberOf XRegExp\n * @param {Object|String} options Options object or string.\n * @example\n *\n * // With an options object\n * XRegExp.install({\n *   // Enables support for astral code points in Unicode addons (implicitly sets flag A)\n *   astral: true,\n *\n *   // Adds named capture groups to the `groups` property of matches\n *   namespacing: true\n * });\n *\n * // With an options string\n * XRegExp.install('astral namespacing');\n */\n\n\nXRegExp.install = function (options) {\n  options = prepareOptions(options);\n\n  if (!features.astral && options.astral) {\n    setAstral(true);\n  }\n\n  if (!features.namespacing && options.namespacing) {\n    setNamespacing(true);\n  }\n};\n/**\n * Checks whether an individual optional feature is installed.\n *\n * @memberOf XRegExp\n * @param {String} feature Name of the feature to check. One of:\n *   - `astral`\n *   - `namespacing`\n * @returns {boolean} Whether the feature is installed.\n * @example\n *\n * XRegExp.isInstalled('astral');\n */\n\n\nXRegExp.isInstalled = function (feature) {\n  return !!features[feature];\n};\n/**\n * Returns `true` if an object is a regex; `false` if it isn't. This works correctly for regexes\n * created in another frame, when `instanceof` and `constructor` checks would fail.\n *\n * @memberOf XRegExp\n * @param {*} value Object to check.\n * @returns {boolean} Whether the object is a `RegExp` object.\n * @example\n *\n * XRegExp.isRegExp('string'); // -> false\n * XRegExp.isRegExp(/regex/i); // -> true\n * XRegExp.isRegExp(RegExp('^', 'm')); // -> true\n * XRegExp.isRegExp(XRegExp('(?s).')); // -> true\n */\n\n\nXRegExp.isRegExp = function (value) {\n  return Object.prototype.toString.call(value) === '[object RegExp]';\n}; // Same as `isType(value, 'RegExp')`, but avoiding that function call here for perf since\n// `isRegExp` is used heavily by internals including regex construction\n\n/**\n * Returns the first matched string, or in global mode, an array containing all matched strings.\n * This is essentially a more convenient re-implementation of `String.prototype.match` that gives\n * the result types you actually want (string instead of `exec`-style array in match-first mode,\n * and an empty array instead of `null` when no matches are found in match-all mode). It also lets\n * you override flag g and ignore `lastIndex`, and fixes browser bugs.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {RegExp} regex Regex to search with.\n * @param {String} [scope='one'] Use 'one' to return the first match as a string. Use 'all' to\n *   return an array of all matched strings. If not explicitly specified and `regex` uses flag g,\n *   `scope` is 'all'.\n * @returns {String|Array} In match-first mode: First match as a string, or `null`. In match-all\n *   mode: Array of all matched strings, or an empty array.\n * @example\n *\n * // Match first\n * XRegExp.match('abc', /\\w/); // -> 'a'\n * XRegExp.match('abc', /\\w/g, 'one'); // -> 'a'\n * XRegExp.match('abc', /x/g, 'one'); // -> null\n *\n * // Match all\n * XRegExp.match('abc', /\\w/g); // -> ['a', 'b', 'c']\n * XRegExp.match('abc', /\\w/, 'all'); // -> ['a', 'b', 'c']\n * XRegExp.match('abc', /x/, 'all'); // -> []\n */\n\n\nXRegExp.match = function (str, regex, scope) {\n  var global = regex.global && scope !== 'one' || scope === 'all';\n  var cacheKey = (global ? 'g' : '') + (regex.sticky ? 'y' : '') || 'noGY';\n  regex[REGEX_DATA] = regex[REGEX_DATA] || {}; // Shares cached copies with `XRegExp.exec`/`replace`\n\n  var r2 = regex[REGEX_DATA][cacheKey] || (regex[REGEX_DATA][cacheKey] = copyRegex(regex, {\n    addG: !!global,\n    removeG: scope === 'one',\n    isInternalOnly: true\n  }));\n  var result = String(nullThrows(str)).match(r2);\n\n  if (regex.global) {\n    regex.lastIndex = scope === 'one' && result ? // Can't use `r2.lastIndex` since `r2` is nonglobal in this case\n    result.index + result[0].length : 0;\n  }\n\n  return global ? result || [] : result && result[0];\n};\n/**\n * Retrieves the matches from searching a string using a chain of regexes that successively search\n * within previous matches. The provided `chain` array can contain regexes and or objects with\n * `regex` and `backref` properties. When a backreference is specified, the named or numbered\n * backreference is passed forward to the next regex or returned.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {Array} chain Regexes that each search for matches within preceding results.\n * @returns {Array} Matches by the last regex in the chain, or an empty array.\n * @example\n *\n * // Basic usage; matches numbers within <b> tags\n * XRegExp.matchChain('1 <b>2</b> 3 <b>4 a 56</b>', [\n *   XRegExp('(?is)<b>.*?</b>'),\n *   /\\d+/\n * ]);\n * // -> ['2', '4', '56']\n *\n * // Passing forward and returning specific backreferences\n * const html = `<a href=\"http://xregexp.com/api/\">XRegExp</a>\n *               <a href=\"http://www.google.com/\">Google</a>`;\n * XRegExp.matchChain(html, [\n *   {regex: /<a href=\"([^\"]+)\">/i, backref: 1},\n *   {regex: XRegExp('(?i)^https?://(?<domain>[^/?#]+)'), backref: 'domain'}\n * ]);\n * // -> ['xregexp.com', 'www.google.com']\n */\n\n\nXRegExp.matchChain = function (str, chain) {\n  return function recurseChain(values, level) {\n    var item = chain[level].regex ? chain[level] : {\n      regex: chain[level]\n    };\n    var matches = [];\n\n    function addMatch(match) {\n      if (item.backref) {\n        var ERR_UNDEFINED_GROUP = \"Backreference to undefined group: \".concat(item.backref);\n        var isNamedBackref = isNaN(item.backref);\n\n        if (isNamedBackref && XRegExp.isInstalled('namespacing')) {\n          // `groups` has `null` as prototype, so using `in` instead of `hasOwnProperty`\n          if (!(match.groups && item.backref in match.groups)) {\n            throw new ReferenceError(ERR_UNDEFINED_GROUP);\n          }\n        } else if (!match.hasOwnProperty(item.backref)) {\n          throw new ReferenceError(ERR_UNDEFINED_GROUP);\n        }\n\n        var backrefValue = isNamedBackref && XRegExp.isInstalled('namespacing') ? match.groups[item.backref] : match[item.backref];\n        matches.push(backrefValue || '');\n      } else {\n        matches.push(match[0]);\n      }\n    }\n\n    var _iterator3 = _createForOfIteratorHelper(values),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var value = _step3.value;\n        (0, _forEach[\"default\"])(XRegExp).call(XRegExp, value, item.regex, addMatch);\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n\n    return level === chain.length - 1 || !matches.length ? matches : recurseChain(matches, level + 1);\n  }([str], 0);\n};\n/**\n * Returns a new string with one or all matches of a pattern replaced. The pattern can be a string\n * or regex, and the replacement can be a string or a function to be called for each match. To\n * perform a global search and replace, use the optional `scope` argument or include flag g if using\n * a regex. Replacement strings can use `$<n>` or `${n}` for named and numbered backreferences.\n * Replacement functions can use named backreferences via the last argument. Also fixes browser bugs\n * compared to the native `String.prototype.replace` and can be used reliably cross-browser.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {RegExp|String} search Search pattern to be replaced.\n * @param {String|Function} replacement Replacement string or a function invoked to create it.\n *   Replacement strings can include special replacement syntax:\n *     - $$ - Inserts a literal $ character.\n *     - $&, $0 - Inserts the matched substring.\n *     - $` - Inserts the string that precedes the matched substring (left context).\n *     - $' - Inserts the string that follows the matched substring (right context).\n *     - $n, $nn - Where n/nn are digits referencing an existing capturing group, inserts\n *       backreference n/nn.\n *     - $<n>, ${n} - Where n is a name or any number of digits that reference an existing capturing\n *       group, inserts backreference n.\n *   Replacement functions are invoked with three or more arguments:\n *     - args[0] - The matched substring (corresponds to `$&` above). If the `namespacing` feature\n *       is off, named backreferences are accessible as properties of this argument.\n *     - args[1..n] - One argument for each backreference (corresponding to `$1`, `$2`, etc. above).\n *       If the regex has no capturing groups, no arguments appear in this position.\n *     - args[n+1] - The zero-based index of the match within the entire search string.\n *     - args[n+2] - The total string being searched.\n *     - args[n+3] - If the the search pattern is a regex with named capturing groups, the last\n *       argument is the groups object. Its keys are the backreference names and its values are the\n *       backreference values. If the `namespacing` feature is off, this argument is not present.\n * @param {String} [scope] Use 'one' to replace the first match only, or 'all'. Defaults to 'one'.\n *   Defaults to 'all' if using a regex with flag g.\n * @returns {String} New string with one or all matches replaced.\n * @example\n *\n * // Regex search, using named backreferences in replacement string\n * const name = XRegExp('(?<first>\\\\w+) (?<last>\\\\w+)');\n * XRegExp.replace('John Smith', name, '$<last>, $<first>');\n * // -> 'Smith, John'\n *\n * // Regex search, using named backreferences in replacement function\n * XRegExp.replace('John Smith', name, (...args) => {\n *   const groups = args[args.length - 1];\n *   return `${groups.last}, ${groups.first}`;\n * });\n * // -> 'Smith, John'\n *\n * // String search, with replace-all\n * XRegExp.replace('RegExp builds RegExps', 'RegExp', 'XRegExp', 'all');\n * // -> 'XRegExp builds XRegExps'\n */\n\n\nXRegExp.replace = function (str, search, replacement, scope) {\n  var isRegex = XRegExp.isRegExp(search);\n  var global = search.global && scope !== 'one' || scope === 'all';\n  var cacheKey = (global ? 'g' : '') + (search.sticky ? 'y' : '') || 'noGY';\n  var s2 = search;\n\n  if (isRegex) {\n    search[REGEX_DATA] = search[REGEX_DATA] || {}; // Shares cached copies with `XRegExp.exec`/`match`. Since a copy is used, `search`'s\n    // `lastIndex` isn't updated *during* replacement iterations\n\n    s2 = search[REGEX_DATA][cacheKey] || (search[REGEX_DATA][cacheKey] = copyRegex(search, {\n      addG: !!global,\n      removeG: scope === 'one',\n      isInternalOnly: true\n    }));\n  } else if (global) {\n    s2 = new RegExp(XRegExp.escape(String(search)), 'g');\n  } // Fixed `replace` required for named backreferences, etc.\n\n\n  var result = fixed.replace.call(nullThrows(str), s2, replacement);\n\n  if (isRegex && search.global) {\n    // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)\n    search.lastIndex = 0;\n  }\n\n  return result;\n};\n/**\n * Performs batch processing of string replacements. Used like `XRegExp.replace`, but accepts an\n * array of replacement details. Later replacements operate on the output of earlier replacements.\n * Replacement details are accepted as an array with a regex or string to search for, the\n * replacement string or function, and an optional scope of 'one' or 'all'. Uses the XRegExp\n * replacement text syntax, which supports named backreference properties via `$<name>` or\n * `${name}`.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {Array} replacements Array of replacement detail arrays.\n * @returns {String} New string with all replacements.\n * @example\n *\n * str = XRegExp.replaceEach(str, [\n *   [XRegExp('(?<name>a)'), 'z$<name>'],\n *   [/b/gi, 'y'],\n *   [/c/g, 'x', 'one'], // scope 'one' overrides /g\n *   [/d/, 'w', 'all'],  // scope 'all' overrides lack of /g\n *   ['e', 'v', 'all'],  // scope 'all' allows replace-all for strings\n *   [/f/g, (match) => match.toUpperCase()]\n * ]);\n */\n\n\nXRegExp.replaceEach = function (str, replacements) {\n  var _iterator4 = _createForOfIteratorHelper(replacements),\n      _step4;\n\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var r = _step4.value;\n      str = XRegExp.replace(str, r[0], r[1], r[2]);\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n\n  return str;\n};\n/**\n * Splits a string into an array of strings using a regex or string separator. Matches of the\n * separator are not included in the result array. However, if `separator` is a regex that contains\n * capturing groups, backreferences are spliced into the result each time `separator` is matched.\n * Fixes browser bugs compared to the native `String.prototype.split` and can be used reliably\n * cross-browser.\n *\n * @memberOf XRegExp\n * @param {String} str String to split.\n * @param {RegExp|String} separator Regex or string to use for separating the string.\n * @param {Number} [limit] Maximum number of items to include in the result array.\n * @returns {Array} Array of substrings.\n * @example\n *\n * // Basic use\n * XRegExp.split('a b c', ' ');\n * // -> ['a', 'b', 'c']\n *\n * // With limit\n * XRegExp.split('a b c', ' ', 2);\n * // -> ['a', 'b']\n *\n * // Backreferences in result array\n * XRegExp.split('..word1..', /([a-z]+)(\\d+)/i);\n * // -> ['..', 'word', '1', '..']\n */\n\n\nXRegExp.split = function (str, separator, limit) {\n  return fixed.split.call(nullThrows(str), separator, limit);\n};\n/**\n * Executes a regex search in a specified string. Returns `true` or `false`. Optional `pos` and\n * `sticky` arguments specify the search start position, and whether the match must start at the\n * specified position only. The `lastIndex` property of the provided regex is not used, but is\n * updated for compatibility. Also fixes browser bugs compared to the native\n * `RegExp.prototype.test` and can be used reliably cross-browser.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {RegExp} regex Regex to search with.\n * @param {Number} [pos=0] Zero-based index at which to start the search.\n * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position\n *   only. The string `'sticky'` is accepted as an alternative to `true`.\n * @returns {boolean} Whether the regex matched the provided value.\n * @example\n *\n * // Basic use\n * XRegExp.test('abc', /c/); // -> true\n *\n * // With pos and sticky\n * XRegExp.test('abc', /c/, 0, 'sticky'); // -> false\n * XRegExp.test('abc', /c/, 2, 'sticky'); // -> true\n */\n// Do this the easy way :-)\n\n\nXRegExp.test = function (str, regex, pos, sticky) {\n  return !!XRegExp.exec(str, regex, pos, sticky);\n};\n/**\n * Uninstalls optional features according to the specified options. Used to undo the actions of\n * `XRegExp.install`.\n *\n * @memberOf XRegExp\n * @param {Object|String} options Options object or string.\n * @example\n *\n * // With an options object\n * XRegExp.uninstall({\n *   // Disables support for astral code points in Unicode addons (unless enabled per regex)\n *   astral: true,\n *\n *   // Don't add named capture groups to the `groups` property of matches\n *   namespacing: true\n * });\n *\n * // With an options string\n * XRegExp.uninstall('astral namespacing');\n */\n\n\nXRegExp.uninstall = function (options) {\n  options = prepareOptions(options);\n\n  if (features.astral && options.astral) {\n    setAstral(false);\n  }\n\n  if (features.namespacing && options.namespacing) {\n    setNamespacing(false);\n  }\n};\n/**\n * Returns an XRegExp object that is the union of the given patterns. Patterns can be provided as\n * regex objects or strings. Metacharacters are escaped in patterns provided as strings.\n * Backreferences in provided regex objects are automatically renumbered to work correctly within\n * the larger combined pattern. Native flags used by provided regexes are ignored in favor of the\n * `flags` argument.\n *\n * @memberOf XRegExp\n * @param {Array} patterns Regexes and strings to combine.\n * @param {String} [flags] Any combination of XRegExp flags.\n * @param {Object} [options] Options object with optional properties:\n *   - `conjunction` {String} Type of conjunction to use: 'or' (default) or 'none'.\n * @returns {RegExp} Union of the provided regexes and strings.\n * @example\n *\n * XRegExp.union(['a+b*c', /(dogs)\\1/, /(cats)\\1/], 'i');\n * // -> /a\\+b\\*c|(dogs)\\1|(cats)\\2/i\n *\n * XRegExp.union([/man/, /bear/, /pig/], 'i', {conjunction: 'none'});\n * // -> /manbearpig/i\n */\n\n\nXRegExp.union = function (patterns, flags, options) {\n  options = options || {};\n  var conjunction = options.conjunction || 'or';\n  var numCaptures = 0;\n  var numPriorCaptures;\n  var captureNames;\n\n  function rewrite(match, paren, backref) {\n    var name = captureNames[numCaptures - numPriorCaptures]; // Capturing group\n\n    if (paren) {\n      ++numCaptures; // If the current capture has a name, preserve the name\n\n      if (name) {\n        return \"(?<\".concat(name, \">\");\n      } // Backreference\n\n    } else if (backref) {\n      // Rewrite the backreference\n      return \"\\\\\".concat(+backref + numPriorCaptures);\n    }\n\n    return match;\n  }\n\n  if (!(isType(patterns, 'Array') && patterns.length)) {\n    throw new TypeError('Must provide a nonempty array of patterns to merge');\n  }\n\n  var parts = /(\\()(?!\\?)|\\\\([1-9]\\d*)|\\\\[\\s\\S]|\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/g;\n  var output = [];\n\n  var _iterator5 = _createForOfIteratorHelper(patterns),\n      _step5;\n\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var pattern = _step5.value;\n\n      if (XRegExp.isRegExp(pattern)) {\n        numPriorCaptures = numCaptures;\n        captureNames = pattern[REGEX_DATA] && pattern[REGEX_DATA].captureNames || []; // Rewrite backreferences. Passing to XRegExp dies on octals and ensures patterns are\n        // independently valid; helps keep this simple. Named captures are put back\n\n        output.push(XRegExp(pattern.source).source.replace(parts, rewrite));\n      } else {\n        output.push(XRegExp.escape(pattern));\n      }\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n\n  var separator = conjunction === 'none' ? '' : '|';\n  return XRegExp(output.join(separator), flags);\n}; // ==--------------------------==\n// Fixed/extended native methods\n// ==--------------------------==\n\n/**\n * Adds named capture support (with backreferences returned as `result.name`), and fixes browser\n * bugs in the native `RegExp.prototype.exec`. Use via `XRegExp.exec`.\n *\n * @memberOf RegExp\n * @param {String} str String to search.\n * @returns {Array} Match array with named backreference properties, or `null`.\n */\n\n\nfixed.exec = function (str) {\n  var origLastIndex = this.lastIndex;\n  var match = RegExp.prototype.exec.apply(this, arguments);\n\n  if (match) {\n    // Fix browsers whose `exec` methods don't return `undefined` for nonparticipating capturing\n    // groups. This fixes IE 5.5-8, but not IE 9's quirks mode or emulation of older IEs. IE 9\n    // in standards mode follows the spec.\n    if (!correctExecNpcg && match.length > 1 && (0, _indexOf[\"default\"])(match).call(match, '') !== -1) {\n      var _context3;\n\n      var r2 = copyRegex(this, {\n        removeG: true,\n        isInternalOnly: true\n      }); // Using `str.slice(match.index)` rather than `match[0]` in case lookahead allowed\n      // matching due to characters outside the match\n\n      (0, _slice[\"default\"])(_context3 = String(str)).call(_context3, match.index).replace(r2, function () {\n        var len = arguments.length; // Skip index 0 and the last 2\n\n        for (var i = 1; i < len - 2; ++i) {\n          if ((i < 0 || arguments.length <= i ? undefined : arguments[i]) === undefined) {\n            match[i] = undefined;\n          }\n        }\n      });\n    } // Attach named capture properties\n\n\n    if (this[REGEX_DATA] && this[REGEX_DATA].captureNames) {\n      var groupsObject = match;\n\n      if (XRegExp.isInstalled('namespacing')) {\n        // https://tc39.github.io/proposal-regexp-named-groups/#sec-regexpbuiltinexec\n        match.groups = (0, _create[\"default\"])(null);\n        groupsObject = match.groups;\n      } // Skip index 0\n\n\n      for (var i = 1; i < match.length; ++i) {\n        var name = this[REGEX_DATA].captureNames[i - 1];\n\n        if (name) {\n          groupsObject[name] = match[i];\n        }\n      } // Preserve any existing `groups` obj that came from native ES2018 named capture\n\n    } else if (!match.groups && XRegExp.isInstalled('namespacing')) {\n      match.groups = undefined;\n    } // Fix browsers that increment `lastIndex` after zero-length matches\n\n\n    if (this.global && !match[0].length && this.lastIndex > match.index) {\n      this.lastIndex = match.index;\n    }\n  }\n\n  if (!this.global) {\n    // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)\n    this.lastIndex = origLastIndex;\n  }\n\n  return match;\n};\n/**\n * Fixes browser bugs in the native `RegExp.prototype.test`.\n *\n * @memberOf RegExp\n * @param {String} str String to search.\n * @returns {boolean} Whether the regex matched the provided value.\n */\n\n\nfixed.test = function (str) {\n  // Do this the easy way :-)\n  return !!fixed.exec.call(this, str);\n};\n/**\n * Adds named capture support (with backreferences returned as `result.name`), and fixes browser\n * bugs in the native `String.prototype.match`.\n *\n * @memberOf String\n * @param {RegExp|*} regex Regex to search with. If not a regex object, it is passed to `RegExp`.\n * @returns {Array} If `regex` uses flag g, an array of match strings or `null`. Without flag g,\n *   the result of calling `regex.exec(this)`.\n */\n\n\nfixed.match = function (regex) {\n  if (!XRegExp.isRegExp(regex)) {\n    // Use the native `RegExp` rather than `XRegExp`\n    regex = new RegExp(regex);\n  } else if (regex.global) {\n    var result = String.prototype.match.apply(this, arguments); // Fixes IE bug\n\n    regex.lastIndex = 0;\n    return result;\n  }\n\n  return fixed.exec.call(regex, nullThrows(this));\n};\n/**\n * Adds support for `${n}` (or `$<n>`) tokens for named and numbered backreferences in replacement\n * text, and provides named backreferences to replacement functions as `arguments[0].name`. Also\n * fixes browser bugs in replacement text syntax when performing a replacement using a nonregex\n * search value, and the value of a replacement regex's `lastIndex` property during replacement\n * iterations and upon completion. Note that this doesn't support SpiderMonkey's proprietary third\n * (`flags`) argument. Use via `XRegExp.replace`.\n *\n * @memberOf String\n * @param {RegExp|String} search Search pattern to be replaced.\n * @param {String|Function} replacement Replacement string or a function invoked to create it.\n * @returns {string} New string with one or all matches replaced.\n */\n\n\nfixed.replace = function (search, replacement) {\n  var isRegex = XRegExp.isRegExp(search);\n  var origLastIndex;\n  var captureNames;\n  var result;\n\n  if (isRegex) {\n    if (search[REGEX_DATA]) {\n      captureNames = search[REGEX_DATA].captureNames;\n    } // Only needed if `search` is nonglobal\n\n\n    origLastIndex = search.lastIndex;\n  } else {\n    search += ''; // Type-convert\n  } // Don't use `typeof`; some older browsers return 'function' for regex objects\n\n\n  if (isType(replacement, 'Function')) {\n    // Stringifying `this` fixes a bug in IE < 9 where the last argument in replacement\n    // functions isn't type-converted to a string\n    result = String(this).replace(search, function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      if (captureNames) {\n        var groupsObject;\n\n        if (XRegExp.isInstalled('namespacing')) {\n          // https://tc39.github.io/proposal-regexp-named-groups/#sec-regexpbuiltinexec\n          groupsObject = (0, _create[\"default\"])(null);\n          args.push(groupsObject);\n        } else {\n          // Change the `args[0]` string primitive to a `String` object that can store\n          // properties. This really does need to use `String` as a constructor\n          args[0] = new String(args[0]);\n          groupsObject = args[0];\n        } // Store named backreferences\n\n\n        for (var i = 0; i < captureNames.length; ++i) {\n          if (captureNames[i]) {\n            groupsObject[captureNames[i]] = args[i + 1];\n          }\n        }\n      } // ES6 specs the context for replacement functions as `undefined`\n\n\n      return replacement.apply(void 0, args);\n    });\n  } else {\n    // Ensure that the last value of `args` will be a string when given nonstring `this`,\n    // while still throwing on null or undefined context\n    result = String(nullThrows(this)).replace(search, function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return String(replacement).replace(replacementToken, replacer);\n\n      function replacer($0, bracketed, angled, dollarToken) {\n        bracketed = bracketed || angled; // ES2018 added a new trailing `groups` arg that's passed to replacement functions\n        // when the search regex uses native named capture\n\n        var numNonCaptureArgs = isType(args[args.length - 1], 'Object') ? 4 : 3;\n        var numCaptures = args.length - numNonCaptureArgs; // Handle named or numbered backreference with curly or angled braces: ${n}, $<n>\n\n        if (bracketed) {\n          // Handle backreference to numbered capture, if `bracketed` is an integer. Use\n          // `0` for the entire match. Any number of leading zeros may be used.\n          if (/^\\d+$/.test(bracketed)) {\n            // Type-convert and drop leading zeros\n            var _n = +bracketed;\n\n            if (_n <= numCaptures) {\n              return args[_n] || '';\n            }\n          } // Handle backreference to named capture. If the name does not refer to an\n          // existing capturing group, it's an error. Also handles the error for numbered\n          // backference that does not refer to an existing group.\n          // Using `indexOf` since having groups with the same name is already an error,\n          // otherwise would need `lastIndexOf`.\n\n\n          var n = captureNames ? (0, _indexOf[\"default\"])(captureNames).call(captureNames, bracketed) : -1;\n\n          if (n < 0) {\n            throw new SyntaxError(\"Backreference to undefined group \".concat($0));\n          }\n\n          return args[n + 1] || '';\n        } // Handle `$`-prefixed variable\n        // Handle space/blank first because type conversion with `+` drops space padding\n        // and converts spaces and empty strings to `0`\n\n\n        if (dollarToken === '' || dollarToken === ' ') {\n          throw new SyntaxError(\"Invalid token \".concat($0));\n        }\n\n        if (dollarToken === '&' || +dollarToken === 0) {\n          // $&, $0 (not followed by 1-9), $00\n          return args[0];\n        }\n\n        if (dollarToken === '$') {\n          // $$\n          return '$';\n        }\n\n        if (dollarToken === '`') {\n          var _context4; // $` (left context)\n\n\n          return (0, _slice[\"default\"])(_context4 = args[args.length - 1]).call(_context4, 0, args[args.length - 2]);\n        }\n\n        if (dollarToken === \"'\") {\n          var _context5; // $' (right context)\n\n\n          return (0, _slice[\"default\"])(_context5 = args[args.length - 1]).call(_context5, args[args.length - 2] + args[0].length);\n        } // Handle numbered backreference without braces\n        // Type-convert and drop leading zero\n\n\n        dollarToken = +dollarToken; // XRegExp behavior for `$n` and `$nn`:\n        // - Backrefs end after 1 or 2 digits. Use `${..}` or `$<..>` for more digits.\n        // - `$1` is an error if no capturing groups.\n        // - `$10` is an error if less than 10 capturing groups. Use `${1}0` or `$<1>0`\n        //   instead.\n        // - `$01` is `$1` if at least one capturing group, else it's an error.\n        // - `$0` (not followed by 1-9) and `$00` are the entire match.\n        // Native behavior, for comparison:\n        // - Backrefs end after 1 or 2 digits. Cannot reference capturing group 100+.\n        // - `$1` is a literal `$1` if no capturing groups.\n        // - `$10` is `$1` followed by a literal `0` if less than 10 capturing groups.\n        // - `$01` is `$1` if at least one capturing group, else it's a literal `$01`.\n        // - `$0` is a literal `$0`.\n\n        if (!isNaN(dollarToken)) {\n          if (dollarToken > numCaptures) {\n            throw new SyntaxError(\"Backreference to undefined group \".concat($0));\n          }\n\n          return args[dollarToken] || '';\n        } // `$` followed by an unsupported char is an error, unlike native JS\n\n\n        throw new SyntaxError(\"Invalid token \".concat($0));\n      }\n    });\n  }\n\n  if (isRegex) {\n    if (search.global) {\n      // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)\n      search.lastIndex = 0;\n    } else {\n      // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)\n      search.lastIndex = origLastIndex;\n    }\n  }\n\n  return result;\n};\n/**\n * Fixes browser bugs in the native `String.prototype.split`. Use via `XRegExp.split`.\n *\n * @memberOf String\n * @param {RegExp|String} separator Regex or string to use for separating the string.\n * @param {Number} [limit] Maximum number of items to include in the result array.\n * @returns {!Array} Array of substrings.\n */\n\n\nfixed.split = function (separator, limit) {\n  if (!XRegExp.isRegExp(separator)) {\n    // Browsers handle nonregex split correctly, so use the faster native method\n    return String.prototype.split.apply(this, arguments);\n  }\n\n  var str = String(this);\n  var output = [];\n  var origLastIndex = separator.lastIndex;\n  var lastLastIndex = 0;\n  var lastLength; // Values for `limit`, per the spec:\n  // If undefined: pow(2,32) - 1\n  // If 0, Infinity, or NaN: 0\n  // If positive number: limit = floor(limit); if (limit >= pow(2,32)) limit -= pow(2,32);\n  // If negative number: pow(2,32) - floor(abs(limit))\n  // If other: Type-convert, then use the above rules\n  // This line fails in very strange ways for some values of `limit` in Opera 10.5-10.63, unless\n  // Opera Dragonfly is open (go figure). It works in at least Opera 9.5-10.1 and 11+\n\n  limit = (limit === undefined ? -1 : limit) >>> 0;\n  (0, _forEach[\"default\"])(XRegExp).call(XRegExp, str, separator, function (match) {\n    // This condition is not the same as `if (match[0].length)`\n    if (match.index + match[0].length > lastLastIndex) {\n      output.push((0, _slice[\"default\"])(str).call(str, lastLastIndex, match.index));\n\n      if (match.length > 1 && match.index < str.length) {\n        Array.prototype.push.apply(output, (0, _slice[\"default\"])(match).call(match, 1));\n      }\n\n      lastLength = match[0].length;\n      lastLastIndex = match.index + lastLength;\n    }\n  });\n\n  if (lastLastIndex === str.length) {\n    if (!separator.test('') || lastLength) {\n      output.push('');\n    }\n  } else {\n    output.push((0, _slice[\"default\"])(str).call(str, lastLastIndex));\n  }\n\n  separator.lastIndex = origLastIndex;\n  return output.length > limit ? (0, _slice[\"default\"])(output).call(output, 0, limit) : output;\n}; // ==--------------------------==\n// Built-in syntax/flag tokens\n// ==--------------------------==\n\n/*\n * Letter escapes that natively match literal characters: `\\a`, `\\A`, etc. These should be\n * SyntaxErrors but are allowed in web reality. XRegExp makes them errors for cross-browser\n * consistency and to reserve their syntax, but lets them be superseded by addons.\n */\n\n\nXRegExp.addToken(/\\\\([ABCE-RTUVXYZaeg-mopqyz]|c(?![A-Za-z])|u(?![\\dA-Fa-f]{4}|{[\\dA-Fa-f]+})|x(?![\\dA-Fa-f]{2}))/, function (match, scope) {\n  // \\B is allowed in default scope only\n  if (match[1] === 'B' && scope === defaultScope) {\n    return match[0];\n  }\n\n  throw new SyntaxError(\"Invalid escape \".concat(match[0]));\n}, {\n  scope: 'all',\n  leadChar: '\\\\'\n});\n/*\n * Unicode code point escape with curly braces: `\\u{N..}`. `N..` is any one or more digit\n * hexadecimal number from 0-10FFFF, and can include leading zeros. Requires the native ES6 `u` flag\n * to support code points greater than U+FFFF. Avoids converting code points above U+FFFF to\n * surrogate pairs (which could be done without flag `u`), since that could lead to broken behavior\n * if you follow a `\\u{N..}` token that references a code point above U+FFFF with a quantifier, or\n * if you use the same in a character class.\n */\n\nXRegExp.addToken(/\\\\u{([\\dA-Fa-f]+)}/, function (match, scope, flags) {\n  var code = dec(match[1]);\n\n  if (code > 0x10FFFF) {\n    throw new SyntaxError(\"Invalid Unicode code point \".concat(match[0]));\n  }\n\n  if (code <= 0xFFFF) {\n    // Converting to \\uNNNN avoids needing to escape the literal character and keep it\n    // separate from preceding tokens\n    return \"\\\\u\".concat(pad4(hex(code)));\n  } // If `code` is between 0xFFFF and 0x10FFFF, require and defer to native handling\n\n\n  if (hasNativeU && (0, _indexOf[\"default\"])(flags).call(flags, 'u') !== -1) {\n    return match[0];\n  }\n\n  throw new SyntaxError('Cannot use Unicode code point above \\\\u{FFFF} without flag u');\n}, {\n  scope: 'all',\n  leadChar: '\\\\'\n});\n/*\n * Comment pattern: `(?# )`. Inline comments are an alternative to the line comments allowed in\n * free-spacing mode (flag x).\n */\n\nXRegExp.addToken(/\\(\\?#[^)]*\\)/, getContextualTokenSeparator, {\n  leadChar: '('\n});\n/*\n * Whitespace and line comments, in free-spacing mode (aka extended mode, flag x) only.\n */\n\nXRegExp.addToken(/\\s+|#[^\\n]*\\n?/, getContextualTokenSeparator, {\n  flag: 'x'\n});\n/*\n * Dot, in dotAll mode (aka singleline mode, flag s) only.\n */\n\nif (!hasNativeS) {\n  XRegExp.addToken(/\\./, function () {\n    return '[\\\\s\\\\S]';\n  }, {\n    flag: 's',\n    leadChar: '.'\n  });\n}\n/*\n * Named backreference: `\\k<name>`. Backreference names can use RegExpIdentifierName characters\n * only. Also allows numbered backreferences as `\\k<n>`.\n */\n\n\nXRegExp.addToken(/\\\\k<([^>]+)>/, function (match) {\n  var _context6, _context7; // Groups with the same name is an error, else would need `lastIndexOf`\n\n\n  var index = isNaN(match[1]) ? (0, _indexOf[\"default\"])(_context6 = this.captureNames).call(_context6, match[1]) + 1 : +match[1];\n  var endIndex = match.index + match[0].length;\n\n  if (!index || index > this.captureNames.length) {\n    throw new SyntaxError(\"Backreference to undefined group \".concat(match[0]));\n  } // Keep backreferences separate from subsequent literal numbers. This avoids e.g.\n  // inadvertedly changing `(?<n>)\\k<n>1` to `()\\11`.\n\n\n  return (0, _concat[\"default\"])(_context7 = \"\\\\\".concat(index)).call(_context7, endIndex === match.input.length || isNaN(match.input[endIndex]) ? '' : '(?:)');\n}, {\n  leadChar: '\\\\'\n});\n/*\n * Numbered backreference or octal, plus any following digits: `\\0`, `\\11`, etc. Octals except `\\0`\n * not followed by 0-9 and backreferences to unopened capture groups throw an error. Other matches\n * are returned unaltered. IE < 9 doesn't support backreferences above `\\99` in regex syntax.\n */\n\nXRegExp.addToken(/\\\\(\\d+)/, function (match, scope) {\n  if (!(scope === defaultScope && /^[1-9]/.test(match[1]) && +match[1] <= this.captureNames.length) && match[1] !== '0') {\n    throw new SyntaxError(\"Cannot use octal escape or backreference to undefined group \".concat(match[0]));\n  }\n\n  return match[0];\n}, {\n  scope: 'all',\n  leadChar: '\\\\'\n});\n/*\n * Named capturing group; match the opening delimiter only: `(?<name>`. Capture names can use the\n * RegExpIdentifierName characters only. Names can't be integers. Supports Python-style\n * `(?P<name>` as an alternate syntax to avoid issues in some older versions of Opera which natively\n * supported the Python-style syntax. Otherwise, XRegExp might treat numbered backreferences to\n * Python-style named capture as octals.\n */\n\nXRegExp.addToken(/\\(\\?P?<((?:[\\$A-Z_a-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08C7\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D04-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1878\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BF\\u31F0-\\u31FF\\u3400-\\u4DBF\\u4E00-\\u9FFC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7BF\\uA7C2-\\uA7CA\\uA7F5-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB69\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDD00-\\uDD23\\uDE80-\\uDEA9\\uDEB0\\uDEB1\\uDF00-\\uDF1C\\uDF27\\uDF30-\\uDF45\\uDFB0-\\uDFC4\\uDFE0-\\uDFF6]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD44\\uDD47\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC5F-\\uDC61\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDEB8\\uDF00-\\uDF1A]|\\uD806[\\uDC00-\\uDC2B\\uDCA0-\\uDCDF\\uDCFF-\\uDD06\\uDD09\\uDD0C-\\uDD13\\uDD15\\uDD16\\uDD18-\\uDD2F\\uDD3F\\uDD41\\uDDA0-\\uDDA7\\uDDAA-\\uDDD0\\uDDE1\\uDDE3\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE89\\uDE9D\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDEE0-\\uDEF2\\uDFB0]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD822\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879\\uD880-\\uD883][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE7F\\uDF00-\\uDF4A\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1\\uDFE3]|\\uD821[\\uDC00-\\uDFF7]|\\uD823[\\uDC00-\\uDCD5\\uDD00-\\uDD08]|\\uD82C[\\uDC00-\\uDD1E\\uDD50-\\uDD52\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD838[\\uDD00-\\uDD2C\\uDD37-\\uDD3D\\uDD4E\\uDEC0-\\uDEEB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43\\uDD4B]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDEDD\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uD884[\\uDC00-\\uDF4A])(?:[\\$0-9A-Z_a-z\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u07FD\\u0800-\\u082D\\u0840-\\u085B\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08C7\\u08D3-\\u08E1\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u09FC\\u09FE\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9-\\u0AFF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B55-\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C80-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D00-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D54-\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D81-\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1878\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1ABF\\u1AC0\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CD0-\\u1CD2\\u1CD4-\\u1CFA\\u1D00-\\u1DF9\\u1DFB-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BF\\u31F0-\\u31FF\\u3400-\\u4DBF\\u4E00-\\u9FFC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7BF\\uA7C2-\\uA7CA\\uA7F5-\\uA827\\uA82C\\uA840-\\uA873\\uA880-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB69\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDD00-\\uDD27\\uDD30-\\uDD39\\uDE80-\\uDEA9\\uDEAB\\uDEAC\\uDEB0\\uDEB1\\uDF00-\\uDF1C\\uDF27\\uDF30-\\uDF50\\uDFB0-\\uDFC4\\uDFE0-\\uDFF6]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD44-\\uDD47\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDC9-\\uDDCC\\uDDCE-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE3E\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3B-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC00-\\uDC4A\\uDC50-\\uDC59\\uDC5E-\\uDC61\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB8\\uDEC0-\\uDEC9\\uDF00-\\uDF1A\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDC00-\\uDC3A\\uDCA0-\\uDCE9\\uDCFF-\\uDD06\\uDD09\\uDD0C-\\uDD13\\uDD15\\uDD16\\uDD18-\\uDD35\\uDD37\\uDD38\\uDD3B-\\uDD43\\uDD50-\\uDD59\\uDDA0-\\uDDA7\\uDDAA-\\uDDD7\\uDDDA-\\uDDE1\\uDDE3\\uDDE4\\uDE00-\\uDE3E\\uDE47\\uDE50-\\uDE99\\uDE9D\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC36\\uDC38-\\uDC40\\uDC50-\\uDC59\\uDC72-\\uDC8F\\uDC92-\\uDCA7\\uDCA9-\\uDCB6\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD36\\uDD3A\\uDD3C\\uDD3D\\uDD3F-\\uDD47\\uDD50-\\uDD59\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD8E\\uDD90\\uDD91\\uDD93-\\uDD98\\uDDA0-\\uDDA9\\uDEE0-\\uDEF6\\uDFB0]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD822\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879\\uD880-\\uD883][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE7F\\uDF00-\\uDF4A\\uDF4F-\\uDF87\\uDF8F-\\uDF9F\\uDFE0\\uDFE1\\uDFE3\\uDFE4\\uDFF0\\uDFF1]|\\uD821[\\uDC00-\\uDFF7]|\\uD823[\\uDC00-\\uDCD5\\uDD00-\\uDD08]|\\uD82C[\\uDC00-\\uDD1E\\uDD50-\\uDD52\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A\\uDD00-\\uDD2C\\uDD30-\\uDD3D\\uDD40-\\uDD49\\uDD4E\\uDEC0-\\uDEF9]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6\\uDD00-\\uDD4B\\uDD50-\\uDD59]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD83E[\\uDFF0-\\uDFF9]|\\uD869[\\uDC00-\\uDEDD\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uD884[\\uDC00-\\uDF4A]|\\uDB40[\\uDD00-\\uDDEF])*)>/, function (match) {\n  var _context8;\n\n  if (!XRegExp.isInstalled('namespacing') && (match[1] === 'length' || match[1] === '__proto__')) {\n    throw new SyntaxError(\"Cannot use reserved word as capture name \".concat(match[0]));\n  }\n\n  if ((0, _indexOf[\"default\"])(_context8 = this.captureNames).call(_context8, match[1]) !== -1) {\n    throw new SyntaxError(\"Cannot use same name for multiple groups \".concat(match[0]));\n  }\n\n  this.captureNames.push(match[1]);\n  this.hasNamedCapture = true;\n  return '(';\n}, {\n  leadChar: '('\n});\n/*\n * Capturing group; match the opening parenthesis only. Required for support of named capturing\n * groups. Also adds explicit capture mode (flag n).\n */\n\nXRegExp.addToken(/\\((?!\\?)/, function (match, scope, flags) {\n  if ((0, _indexOf[\"default\"])(flags).call(flags, 'n') !== -1) {\n    return '(?:';\n  }\n\n  this.captureNames.push(null);\n  return '(';\n}, {\n  optionalFlags: 'n',\n  leadChar: '('\n});\nvar _default = XRegExp;\nexports[\"default\"] = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["E:/AcademicAdvisingSystem/client/node_modules/xregexp/lib/xregexp.js"],"names":["_sliceInstanceProperty2","require","_Array$from","_Symbol","_getIteratorMethod","_Array$isArray","_getIterator","_Object$defineProperty","_interopRequireDefault","exports","value","_slicedToArray2","_flags","_sort","_slice","_parseInt2","_indexOf","_forEach","_create","_concat","_createForOfIteratorHelper","o","allowArrayLike","it","_unsupportedIterableToArray","length","i","F","s","n","done","e","_e","f","TypeError","normalCompletion","didErr","err","step","next","_e2","minLen","_context9","_arrayLikeToArray","Object","prototype","toString","call","constructor","name","test","arr","len","arr2","Array","REGEX_DATA","features","astral","namespacing","fixed","regexCache","patternCache","tokens","defaultScope","classScope","nativeTokens","replacementToken","correctExecNpcg","exec","undefined","hasFlagsProp","hasNativeFlag","flag","isSupported","RegExp","gy","incompleteY","replace","exception","hasNativeS","hasNativeU","hasNativeY","registeredFlags","g","m","u","y","nonnativeFlags","augment","regex","captureNames","xSource","xFlags","isInternalOnly","_context","__proto__","XRegExp","p","source","flags","split","join","clipDuplicates","str","copyRegex","options","_context2","isRegExp","xData","getNativeFlags","flagsToAdd","flagsToRemove","xregexpSource","xregexpFlags","removeG","removeY","concat","addG","addY","hasNamedCapture","dec","hex","getContextualTokenSeparator","match","scope","matchEndPos","index","precedingChar","input","followingChar","substring","isQuantifierNext","pattern","pos","inlineCommentPattern","lineCommentPattern","quantifierPattern","isType","type","nullThrows","pad4","prepareFlags","SyntaxError","$0","$1","_iterator","_step","prepareOptions","registerFlag","Error","runTokens","context","leadChar","result","t","matchLength","output","handler","reparse","setAstral","on","setNamespacing","String","isInstalled","applied","appliedPattern","appliedFlags","_XRegExp$exec","_XRegExp$exec2","token","captures","generated","version","_clipDuplicates","_hasNativeFlag","_dec","_hex","_pad4","addToken","_options","optionalFlags","_iterator2","_step2","push","cache","flush","cacheName","escape","charCodeAt","sticky","cacheKey","fakeY","r2","lastIndex","pop","global","forEach","callback","globalize","install","feature","matchChain","chain","recurseChain","values","level","item","matches","addMatch","backref","ERR_UNDEFINED_GROUP","isNamedBackref","isNaN","groups","ReferenceError","hasOwnProperty","backrefValue","_iterator3","_step3","search","replacement","isRegex","s2","replaceEach","replacements","_iterator4","_step4","r","separator","limit","uninstall","union","patterns","conjunction","numCaptures","numPriorCaptures","rewrite","paren","parts","_iterator5","_step5","origLastIndex","apply","arguments","_context3","groupsObject","_len","args","_key","_len2","_key2","replacer","bracketed","angled","dollarToken","numNonCaptureArgs","_n","_context4","_context5","lastLastIndex","lastLength","code","_context6","_context7","endIndex","_context8","_default","module","default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _sliceInstanceProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/instance/slice\");\n\nvar _Array$from = require(\"@babel/runtime-corejs3/core-js-stable/array/from\");\n\nvar _Symbol = require(\"@babel/runtime-corejs3/core-js-stable/symbol\");\n\nvar _getIteratorMethod = require(\"@babel/runtime-corejs3/core-js/get-iterator-method\");\n\nvar _Array$isArray = require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\");\n\nvar _getIterator = require(\"@babel/runtime-corejs3/core-js/get-iterator\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports[\"default\"] = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/slicedToArray\"));\n\nvar _flags = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/flags\"));\n\nvar _sort = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/sort\"));\n\nvar _slice = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/slice\"));\n\nvar _parseInt2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/parse-int\"));\n\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\n\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\n\nvar _create = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/create\"));\n\nvar _concat = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/concat\"));\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof _Symbol === \"undefined\" || _getIteratorMethod(o) == null) { if (_Array$isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = _getIterator(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { var _context9; if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = _sliceInstanceProperty2(_context9 = Object.prototype.toString.call(o)).call(_context9, 8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return _Array$from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/*!\n * XRegExp 5.0.2\n * <xregexp.com>\n * Steven Levithan (c) 2007-present MIT License\n */\n\n/**\n * XRegExp provides augmented, extensible regular expressions. You get additional regex syntax and\n * flags, beyond what browsers support natively. XRegExp is also a regex utility belt with tools to\n * make your client-side grepping simpler and more powerful, while freeing you from related\n * cross-browser inconsistencies.\n */\n// ==--------------------------==\n// Private stuff\n// ==--------------------------==\n// Property name used for extended regex instance data\nvar REGEX_DATA = 'xregexp'; // Optional features that can be installed and uninstalled\n\nvar features = {\n  astral: false,\n  namespacing: true\n}; // Storage for fixed/extended native methods\n\nvar fixed = {}; // Storage for regexes cached by `XRegExp.cache`\n\nvar regexCache = {}; // Storage for pattern details cached by the `XRegExp` constructor\n\nvar patternCache = {}; // Storage for regex syntax tokens added internally or by `XRegExp.addToken`\n\nvar tokens = []; // Token scopes\n\nvar defaultScope = 'default';\nvar classScope = 'class'; // Regexes that match native regex syntax, including octals\n\nvar nativeTokens = {\n  // Any native multicharacter token in default scope, or any single character\n  'default': /\\\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9]\\d*|x[\\dA-Fa-f]{2}|u(?:[\\dA-Fa-f]{4}|{[\\dA-Fa-f]+})|c[A-Za-z]|[\\s\\S])|\\(\\?(?:[:=!]|<[=!])|[?*+]\\?|{\\d+(?:,\\d*)?}\\??|[\\s\\S]/,\n  // Any native multicharacter token in character class scope, or any single character\n  'class': /\\\\(?:[0-3][0-7]{0,2}|[4-7][0-7]?|x[\\dA-Fa-f]{2}|u(?:[\\dA-Fa-f]{4}|{[\\dA-Fa-f]+})|c[A-Za-z]|[\\s\\S])|[\\s\\S]/\n}; // Any backreference or dollar-prefixed character in replacement strings\n\nvar replacementToken = /\\$(?:\\{([^\\}]+)\\}|<([^>]+)>|(\\d\\d?|[\\s\\S]?))/g; // Check for correct `exec` handling of nonparticipating capturing groups\n\nvar correctExecNpcg = /()??/.exec('')[1] === undefined; // Check for ES6 `flags` prop support\n\nvar hasFlagsProp = (0, _flags[\"default\"])(/x/) !== undefined;\n\nfunction hasNativeFlag(flag) {\n  // Can't check based on the presence of properties/getters since browsers might support such\n  // properties even when they don't support the corresponding flag in regex construction (tested\n  // in Chrome 48, where `'unicode' in /x/` is true but trying to construct a regex with flag `u`\n  // throws an error)\n  var isSupported = true;\n\n  try {\n    // Can't use regex literals for testing even in a `try` because regex literals with\n    // unsupported flags cause a compilation error in IE\n    new RegExp('', flag); // Work around a broken/incomplete IE11 polyfill for sticky introduced in core-js 3.6.0\n\n    if (flag === 'y') {\n      // Using function to avoid babel transform to regex literal\n      var gy = function () {\n        return 'gy';\n      }();\n\n      var incompleteY = '.a'.replace(new RegExp('a', gy), '.') === '..';\n\n      if (incompleteY) {\n        isSupported = false;\n      }\n    }\n  } catch (exception) {\n    isSupported = false;\n  }\n\n  return isSupported;\n} // Check for ES2018 `s` flag support\n\n\nvar hasNativeS = hasNativeFlag('s'); // Check for ES6 `u` flag support\n\nvar hasNativeU = hasNativeFlag('u'); // Check for ES6 `y` flag support\n\nvar hasNativeY = hasNativeFlag('y'); // Tracker for known flags, including addon flags\n\nvar registeredFlags = {\n  g: true,\n  i: true,\n  m: true,\n  s: hasNativeS,\n  u: hasNativeU,\n  y: hasNativeY\n}; // Flags to remove when passing to native `RegExp` constructor\n\nvar nonnativeFlags = hasNativeS ? /[^gimsuy]+/g : /[^gimuy]+/g;\n/**\n * Attaches extended data and `XRegExp.prototype` properties to a regex object.\n *\n * @private\n * @param {RegExp} regex Regex to augment.\n * @param {Array} captureNames Array with capture names, or `null`.\n * @param {String} xSource XRegExp pattern used to generate `regex`, or `null` if N/A.\n * @param {String} xFlags XRegExp flags used to generate `regex`, or `null` if N/A.\n * @param {Boolean} [isInternalOnly=false] Whether the regex will be used only for internal\n *   operations, and never exposed to users. For internal-only regexes, we can improve perf by\n *   skipping some operations like attaching `XRegExp.prototype` properties.\n * @returns {!RegExp} Augmented regex.\n */\n\nfunction augment(regex, captureNames, xSource, xFlags, isInternalOnly) {\n  var _context;\n\n  regex[REGEX_DATA] = {\n    captureNames: captureNames\n  };\n\n  if (isInternalOnly) {\n    return regex;\n  } // Can't auto-inherit these since the XRegExp constructor returns a nonprimitive value\n\n\n  if (regex.__proto__) {\n    regex.__proto__ = XRegExp.prototype;\n  } else {\n    for (var p in XRegExp.prototype) {\n      // An `XRegExp.prototype.hasOwnProperty(p)` check wouldn't be worth it here, since this\n      // is performance sensitive, and enumerable `Object.prototype` or `RegExp.prototype`\n      // extensions exist on `regex.prototype` anyway\n      regex[p] = XRegExp.prototype[p];\n    }\n  }\n\n  regex[REGEX_DATA].source = xSource; // Emulate the ES6 `flags` prop by ensuring flags are in alphabetical order\n\n  regex[REGEX_DATA].flags = xFlags ? (0, _sort[\"default\"])(_context = xFlags.split('')).call(_context).join('') : xFlags;\n  return regex;\n}\n/**\n * Removes any duplicate characters from the provided string.\n *\n * @private\n * @param {String} str String to remove duplicate characters from.\n * @returns {string} String with any duplicate characters removed.\n */\n\n\nfunction clipDuplicates(str) {\n  return str.replace(/([\\s\\S])(?=[\\s\\S]*\\1)/g, '');\n}\n/**\n * Copies a regex object while preserving extended data and augmenting with `XRegExp.prototype`\n * properties. The copy has a fresh `lastIndex` property (set to zero). Allows adding and removing\n * flags g and y while copying the regex.\n *\n * @private\n * @param {RegExp} regex Regex to copy.\n * @param {Object} [options] Options object with optional properties:\n *   - `addG` {Boolean} Add flag g while copying the regex.\n *   - `addY` {Boolean} Add flag y while copying the regex.\n *   - `removeG` {Boolean} Remove flag g while copying the regex.\n *   - `removeY` {Boolean} Remove flag y while copying the regex.\n *   - `isInternalOnly` {Boolean} Whether the copied regex will be used only for internal\n *     operations, and never exposed to users. For internal-only regexes, we can improve perf by\n *     skipping some operations like attaching `XRegExp.prototype` properties.\n *   - `source` {String} Overrides `<regex>.source`, for special cases.\n * @returns {RegExp} Copy of the provided regex, possibly with modified flags.\n */\n\n\nfunction copyRegex(regex, options) {\n  var _context2;\n\n  if (!XRegExp.isRegExp(regex)) {\n    throw new TypeError('Type RegExp expected');\n  }\n\n  var xData = regex[REGEX_DATA] || {};\n  var flags = getNativeFlags(regex);\n  var flagsToAdd = '';\n  var flagsToRemove = '';\n  var xregexpSource = null;\n  var xregexpFlags = null;\n  options = options || {};\n\n  if (options.removeG) {\n    flagsToRemove += 'g';\n  }\n\n  if (options.removeY) {\n    flagsToRemove += 'y';\n  }\n\n  if (flagsToRemove) {\n    flags = flags.replace(new RegExp(\"[\".concat(flagsToRemove, \"]+\"), 'g'), '');\n  }\n\n  if (options.addG) {\n    flagsToAdd += 'g';\n  }\n\n  if (options.addY) {\n    flagsToAdd += 'y';\n  }\n\n  if (flagsToAdd) {\n    flags = clipDuplicates(flags + flagsToAdd);\n  }\n\n  if (!options.isInternalOnly) {\n    if (xData.source !== undefined) {\n      xregexpSource = xData.source;\n    } // null or undefined; don't want to add to `flags` if the previous value was null, since\n    // that indicates we're not tracking original precompilation flags\n\n\n    if ((0, _flags[\"default\"])(xData) != null) {\n      // Flags are only added for non-internal regexes by `XRegExp.globalize`. Flags are never\n      // removed for non-internal regexes, so don't need to handle it\n      xregexpFlags = flagsToAdd ? clipDuplicates((0, _flags[\"default\"])(xData) + flagsToAdd) : (0, _flags[\"default\"])(xData);\n    }\n  } // Augment with `XRegExp.prototype` properties, but use the native `RegExp` constructor to avoid\n  // searching for special tokens. That would be wrong for regexes constructed by `RegExp`, and\n  // unnecessary for regexes constructed by `XRegExp` because the regex has already undergone the\n  // translation to native regex syntax\n\n\n  regex = augment(new RegExp(options.source || regex.source, flags), hasNamedCapture(regex) ? (0, _slice[\"default\"])(_context2 = xData.captureNames).call(_context2, 0) : null, xregexpSource, xregexpFlags, options.isInternalOnly);\n  return regex;\n}\n/**\n * Converts hexadecimal to decimal.\n *\n * @private\n * @param {String} hex\n * @returns {number}\n */\n\n\nfunction dec(hex) {\n  return (0, _parseInt2[\"default\"])(hex, 16);\n}\n/**\n * Returns a pattern that can be used in a native RegExp in place of an ignorable token such as an\n * inline comment or whitespace with flag x. This is used directly as a token handler function\n * passed to `XRegExp.addToken`.\n *\n * @private\n * @param {String} match Match arg of `XRegExp.addToken` handler\n * @param {String} scope Scope arg of `XRegExp.addToken` handler\n * @param {String} flags Flags arg of `XRegExp.addToken` handler\n * @returns {string} Either '' or '(?:)', depending on which is needed in the context of the match.\n */\n\n\nfunction getContextualTokenSeparator(match, scope, flags) {\n  var matchEndPos = match.index + match[0].length;\n  var precedingChar = match.input[match.index - 1];\n  var followingChar = match.input[matchEndPos];\n\n  if ( // No need to separate tokens if at the beginning or end of a group, before or after a\n  // group, or before or after a `|`\n  /^[()|]$/.test(precedingChar) || /^[()|]$/.test(followingChar) || // No need to separate tokens if at the beginning or end of the pattern\n  match.index === 0 || matchEndPos === match.input.length || // No need to separate tokens if at the beginning of a noncapturing group or lookaround.\n  // Looks only at the last 4 chars (at most) for perf when constructing long regexes.\n  /\\(\\?(?:[:=!]|<[=!])$/.test(match.input.substring(match.index - 4, match.index)) || // Avoid separating tokens when the following token is a quantifier\n  isQuantifierNext(match.input, matchEndPos, flags)) {\n    return '';\n  } // Keep tokens separated. This avoids e.g. inadvertedly changing `\\1 1` or `\\1(?#)1` to `\\11`.\n  // This also ensures all tokens remain as discrete atoms, e.g. it prevents converting the\n  // syntax error `(? :` into `(?:`.\n\n\n  return '(?:)';\n}\n/**\n * Returns native `RegExp` flags used by a regex object.\n *\n * @private\n * @param {RegExp} regex Regex to check.\n * @returns {string} Native flags in use.\n */\n\n\nfunction getNativeFlags(regex) {\n  return hasFlagsProp ? (0, _flags[\"default\"])(regex) : // Explicitly using `RegExp.prototype.toString` (rather than e.g. `String` or concatenation\n  // with an empty string) allows this to continue working predictably when\n  // `XRegExp.proptotype.toString` is overridden\n  /\\/([a-z]*)$/i.exec(RegExp.prototype.toString.call(regex))[1];\n}\n/**\n * Determines whether a regex has extended instance data used to track capture names.\n *\n * @private\n * @param {RegExp} regex Regex to check.\n * @returns {boolean} Whether the regex uses named capture.\n */\n\n\nfunction hasNamedCapture(regex) {\n  return !!(regex[REGEX_DATA] && regex[REGEX_DATA].captureNames);\n}\n/**\n * Converts decimal to hexadecimal.\n *\n * @private\n * @param {Number|String} dec\n * @returns {string}\n */\n\n\nfunction hex(dec) {\n  return (0, _parseInt2[\"default\"])(dec, 10).toString(16);\n}\n/**\n * Checks whether the next nonignorable token after the specified position is a quantifier.\n *\n * @private\n * @param {String} pattern Pattern to search within.\n * @param {Number} pos Index in `pattern` to search at.\n * @param {String} flags Flags used by the pattern.\n * @returns {Boolean} Whether the next nonignorable token is a quantifier.\n */\n\n\nfunction isQuantifierNext(pattern, pos, flags) {\n  var inlineCommentPattern = '\\\\(\\\\?#[^)]*\\\\)';\n  var lineCommentPattern = '#[^#\\\\n]*';\n  var quantifierPattern = '[?*+]|{\\\\d+(?:,\\\\d*)?}';\n  var regex = (0, _indexOf[\"default\"])(flags).call(flags, 'x') !== -1 ? // Ignore any leading whitespace, line comments, and inline comments\n  /^(?:\\s|#[^#\\n]*|\\(\\?#[^)]*\\))*(?:[?*+]|{\\d+(?:,\\d*)?})/ : // Ignore any leading inline comments\n  /^(?:\\(\\?#[^)]*\\))*(?:[?*+]|{\\d+(?:,\\d*)?})/;\n  return regex.test((0, _slice[\"default\"])(pattern).call(pattern, pos));\n}\n/**\n * Determines whether a value is of the specified type, by resolving its internal [[Class]].\n *\n * @private\n * @param {*} value Object to check.\n * @param {String} type Type to check for, in TitleCase.\n * @returns {boolean} Whether the object matches the type.\n */\n\n\nfunction isType(value, type) {\n  return Object.prototype.toString.call(value) === \"[object \".concat(type, \"]\");\n}\n/**\n * Returns the object, or throws an error if it is `null` or `undefined`. This is used to follow\n * the ES5 abstract operation `ToObject`.\n *\n * @private\n * @param {*} value Object to check and return.\n * @returns {*} The provided object.\n */\n\n\nfunction nullThrows(value) {\n  // null or undefined\n  if (value == null) {\n    throw new TypeError('Cannot convert null or undefined to object');\n  }\n\n  return value;\n}\n/**\n * Adds leading zeros if shorter than four characters. Used for fixed-length hexadecimal values.\n *\n * @private\n * @param {String} str\n * @returns {string}\n */\n\n\nfunction pad4(str) {\n  while (str.length < 4) {\n    str = \"0\".concat(str);\n  }\n\n  return str;\n}\n/**\n * Checks for flag-related errors, and strips/applies flags in a leading mode modifier. Offloads\n * the flag preparation logic from the `XRegExp` constructor.\n *\n * @private\n * @param {String} pattern Regex pattern, possibly with a leading mode modifier.\n * @param {String} flags Any combination of flags.\n * @returns {!Object} Object with properties `pattern` and `flags`.\n */\n\n\nfunction prepareFlags(pattern, flags) {\n  // Recent browsers throw on duplicate flags, so copy this behavior for nonnative flags\n  if (clipDuplicates(flags) !== flags) {\n    throw new SyntaxError(\"Invalid duplicate regex flag \".concat(flags));\n  } // Strip and apply a leading mode modifier with any combination of flags except g or y\n\n\n  pattern = pattern.replace(/^\\(\\?([\\w$]+)\\)/, function ($0, $1) {\n    if (/[gy]/.test($1)) {\n      throw new SyntaxError(\"Cannot use flag g or y in mode modifier \".concat($0));\n    } // Allow duplicate flags within the mode modifier\n\n\n    flags = clipDuplicates(flags + $1);\n    return '';\n  }); // Throw on unknown native or nonnative flags\n\n  var _iterator = _createForOfIteratorHelper(flags),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var flag = _step.value;\n\n      if (!registeredFlags[flag]) {\n        throw new SyntaxError(\"Unknown regex flag \".concat(flag));\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return {\n    pattern: pattern,\n    flags: flags\n  };\n}\n/**\n * Prepares an options object from the given value.\n *\n * @private\n * @param {String|Object} value Value to convert to an options object.\n * @returns {Object} Options object.\n */\n\n\nfunction prepareOptions(value) {\n  var options = {};\n\n  if (isType(value, 'String')) {\n    (0, _forEach[\"default\"])(XRegExp).call(XRegExp, value, /[^\\s,]+/, function (match) {\n      options[match] = true;\n    });\n    return options;\n  }\n\n  return value;\n}\n/**\n * Registers a flag so it doesn't throw an 'unknown flag' error.\n *\n * @private\n * @param {String} flag Single-character flag to register.\n */\n\n\nfunction registerFlag(flag) {\n  if (!/^[\\w$]$/.test(flag)) {\n    throw new Error('Flag must be a single character A-Za-z0-9_$');\n  }\n\n  registeredFlags[flag] = true;\n}\n/**\n * Runs built-in and custom regex syntax tokens in reverse insertion order at the specified\n * position, until a match is found.\n *\n * @private\n * @param {String} pattern Original pattern from which an XRegExp object is being built.\n * @param {String} flags Flags being used to construct the regex.\n * @param {Number} pos Position to search for tokens within `pattern`.\n * @param {Number} scope Regex scope to apply: 'default' or 'class'.\n * @param {Object} context Context object to use for token handler functions.\n * @returns {Object} Object with properties `matchLength`, `output`, and `reparse`; or `null`.\n */\n\n\nfunction runTokens(pattern, flags, pos, scope, context) {\n  var i = tokens.length;\n  var leadChar = pattern[pos];\n  var result = null;\n  var match;\n  var t; // Run in reverse insertion order\n\n  while (i--) {\n    t = tokens[i];\n\n    if (t.leadChar && t.leadChar !== leadChar || t.scope !== scope && t.scope !== 'all' || t.flag && !((0, _indexOf[\"default\"])(flags).call(flags, t.flag) !== -1)) {\n      continue;\n    }\n\n    match = XRegExp.exec(pattern, t.regex, pos, 'sticky');\n\n    if (match) {\n      result = {\n        matchLength: match[0].length,\n        output: t.handler.call(context, match, scope, flags),\n        reparse: t.reparse\n      }; // Finished with token tests\n\n      break;\n    }\n  }\n\n  return result;\n}\n/**\n * Enables or disables implicit astral mode opt-in. When enabled, flag A is automatically added to\n * all new regexes created by XRegExp. This causes an error to be thrown when creating regexes if\n * the Unicode Base addon is not available, since flag A is registered by that addon.\n *\n * @private\n * @param {Boolean} on `true` to enable; `false` to disable.\n */\n\n\nfunction setAstral(on) {\n  features.astral = on;\n}\n/**\n * Adds named capture groups to the `groups` property of match arrays. See here for details:\n * https://github.com/tc39/proposal-regexp-named-groups\n *\n * @private\n * @param {Boolean} on `true` to enable; `false` to disable.\n */\n\n\nfunction setNamespacing(on) {\n  features.namespacing = on;\n} // ==--------------------------==\n// Constructor\n// ==--------------------------==\n\n/**\n * Creates an extended regular expression object for matching text with a pattern. Differs from a\n * native regular expression in that additional syntax and flags are supported. The returned object\n * is in fact a native `RegExp` and works with all native methods.\n *\n * @class XRegExp\n * @constructor\n * @param {String|RegExp} pattern Regex pattern string, or an existing regex object to copy.\n * @param {String} [flags] Any combination of flags.\n *   Native flags:\n *     - `g` - global\n *     - `i` - ignore case\n *     - `m` - multiline anchors\n *     - `u` - unicode (ES6)\n *     - `y` - sticky (Firefox 3+, ES6)\n *   Additional XRegExp flags:\n *     - `n` - explicit capture\n *     - `s` - dot matches all (aka singleline) - works even when not natively supported\n *     - `x` - free-spacing and line comments (aka extended)\n *     - `A` - astral (requires the Unicode Base addon)\n *   Flags cannot be provided when constructing one `RegExp` from another.\n * @returns {RegExp} Extended regular expression object.\n * @example\n *\n * // With named capture and flag x\n * XRegExp(`(?<year>  [0-9]{4} ) -?  # year\n *          (?<month> [0-9]{2} ) -?  # month\n *          (?<day>   [0-9]{2} )     # day`, 'x');\n *\n * // Providing a regex object copies it. Native regexes are recompiled using native (not XRegExp)\n * // syntax. Copies maintain extended data, are augmented with `XRegExp.prototype` properties, and\n * // have fresh `lastIndex` properties (set to zero).\n * XRegExp(/regex/);\n */\n\n\nfunction XRegExp(pattern, flags) {\n  if (XRegExp.isRegExp(pattern)) {\n    if (flags !== undefined) {\n      throw new TypeError('Cannot supply flags when copying a RegExp');\n    }\n\n    return copyRegex(pattern);\n  } // Copy the argument behavior of `RegExp`\n\n\n  pattern = pattern === undefined ? '' : String(pattern);\n  flags = flags === undefined ? '' : String(flags);\n\n  if (XRegExp.isInstalled('astral') && !((0, _indexOf[\"default\"])(flags).call(flags, 'A') !== -1)) {\n    // This causes an error to be thrown if the Unicode Base addon is not available\n    flags += 'A';\n  }\n\n  if (!patternCache[pattern]) {\n    patternCache[pattern] = {};\n  }\n\n  if (!patternCache[pattern][flags]) {\n    var context = {\n      hasNamedCapture: false,\n      captureNames: []\n    };\n    var scope = defaultScope;\n    var output = '';\n    var pos = 0;\n    var result; // Check for flag-related errors, and strip/apply flags in a leading mode modifier\n\n    var applied = prepareFlags(pattern, flags);\n    var appliedPattern = applied.pattern;\n    var appliedFlags = (0, _flags[\"default\"])(applied); // Use XRegExp's tokens to translate the pattern to a native regex pattern.\n    // `appliedPattern.length` may change on each iteration if tokens use `reparse`\n\n    while (pos < appliedPattern.length) {\n      do {\n        // Check for custom tokens at the current position\n        result = runTokens(appliedPattern, appliedFlags, pos, scope, context); // If the matched token used the `reparse` option, splice its output into the\n        // pattern before running tokens again at the same position\n\n        if (result && result.reparse) {\n          appliedPattern = (0, _slice[\"default\"])(appliedPattern).call(appliedPattern, 0, pos) + result.output + (0, _slice[\"default\"])(appliedPattern).call(appliedPattern, pos + result.matchLength);\n        }\n      } while (result && result.reparse);\n\n      if (result) {\n        output += result.output;\n        pos += result.matchLength || 1;\n      } else {\n        // Get the native token at the current position\n        var _XRegExp$exec = XRegExp.exec(appliedPattern, nativeTokens[scope], pos, 'sticky'),\n            _XRegExp$exec2 = (0, _slicedToArray2[\"default\"])(_XRegExp$exec, 1),\n            token = _XRegExp$exec2[0];\n\n        output += token;\n        pos += token.length;\n\n        if (token === '[' && scope === defaultScope) {\n          scope = classScope;\n        } else if (token === ']' && scope === classScope) {\n          scope = defaultScope;\n        }\n      }\n    }\n\n    patternCache[pattern][flags] = {\n      // Use basic cleanup to collapse repeated empty groups like `(?:)(?:)` to `(?:)`. Empty\n      // groups are sometimes inserted during regex transpilation in order to keep tokens\n      // separated. However, more than one empty group in a row is never needed.\n      pattern: output.replace(/(?:\\(\\?:\\))+/g, '(?:)'),\n      // Strip all but native flags\n      flags: appliedFlags.replace(nonnativeFlags, ''),\n      // `context.captureNames` has an item for each capturing group, even if unnamed\n      captures: context.hasNamedCapture ? context.captureNames : null\n    };\n  }\n\n  var generated = patternCache[pattern][flags];\n  return augment(new RegExp(generated.pattern, (0, _flags[\"default\"])(generated)), generated.captures, pattern, flags);\n} // Add `RegExp.prototype` to the prototype chain\n\n\nXRegExp.prototype = /(?:)/; // ==--------------------------==\n// Public properties\n// ==--------------------------==\n\n/**\n * The XRegExp version number as a string containing three dot-separated parts. For example,\n * '2.0.0-beta-3'.\n *\n * @static\n * @memberOf XRegExp\n * @type String\n */\n\nXRegExp.version = '5.0.2'; // ==--------------------------==\n// Public methods\n// ==--------------------------==\n// Intentionally undocumented; used in tests and addons\n\nXRegExp._clipDuplicates = clipDuplicates;\nXRegExp._hasNativeFlag = hasNativeFlag;\nXRegExp._dec = dec;\nXRegExp._hex = hex;\nXRegExp._pad4 = pad4;\n/**\n * Extends XRegExp syntax and allows custom flags. This is used internally and can be used to\n * create XRegExp addons. If more than one token can match the same string, the last added wins.\n *\n * @memberOf XRegExp\n * @param {RegExp} regex Regex object that matches the new token.\n * @param {Function} handler Function that returns a new pattern string (using native regex syntax)\n *   to replace the matched token within all future XRegExp regexes. Has access to persistent\n *   properties of the regex being built, through `this`. Invoked with three arguments:\n *   - The match array, with named backreference properties.\n *   - The regex scope where the match was found: 'default' or 'class'.\n *   - The flags used by the regex, including any flags in a leading mode modifier.\n *   The handler function becomes part of the XRegExp construction process, so be careful not to\n *   construct XRegExps within the function or you will trigger infinite recursion.\n * @param {Object} [options] Options object with optional properties:\n *   - `scope` {String} Scope where the token applies: 'default', 'class', or 'all'.\n *   - `flag` {String} Single-character flag that triggers the token. This also registers the\n *     flag, which prevents XRegExp from throwing an 'unknown flag' error when the flag is used.\n *   - `optionalFlags` {String} Any custom flags checked for within the token `handler` that are\n *     not required to trigger the token. This registers the flags, to prevent XRegExp from\n *     throwing an 'unknown flag' error when any of the flags are used.\n *   - `reparse` {Boolean} Whether the `handler` function's output should not be treated as\n *     final, and instead be reparseable by other tokens (including the current token). Allows\n *     token chaining or deferring.\n *   - `leadChar` {String} Single character that occurs at the beginning of any successful match\n *     of the token (not always applicable). This doesn't change the behavior of the token unless\n *     you provide an erroneous value. However, providing it can increase the token's performance\n *     since the token can be skipped at any positions where this character doesn't appear.\n * @example\n *\n * // Basic usage: Add \\a for the ALERT control code\n * XRegExp.addToken(\n *   /\\\\a/,\n *   () => '\\\\x07',\n *   {scope: 'all'}\n * );\n * XRegExp('\\\\a[\\\\a-\\\\n]+').test('\\x07\\n\\x07'); // -> true\n *\n * // Add the U (ungreedy) flag from PCRE and RE2, which reverses greedy and lazy quantifiers.\n * // Since `scope` is not specified, it uses 'default' (i.e., transformations apply outside of\n * // character classes only)\n * XRegExp.addToken(\n *   /([?*+]|{\\d+(?:,\\d*)?})(\\??)/,\n *   (match) => `${match[1]}${match[2] ? '' : '?'}`,\n *   {flag: 'U'}\n * );\n * XRegExp('a+', 'U').exec('aaa')[0]; // -> 'a'\n * XRegExp('a+?', 'U').exec('aaa')[0]; // -> 'aaa'\n */\n\nXRegExp.addToken = function (regex, handler, options) {\n  options = options || {};\n  var _options = options,\n      optionalFlags = _options.optionalFlags;\n\n  if (options.flag) {\n    registerFlag(options.flag);\n  }\n\n  if (optionalFlags) {\n    optionalFlags = optionalFlags.split('');\n\n    var _iterator2 = _createForOfIteratorHelper(optionalFlags),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var flag = _step2.value;\n        registerFlag(flag);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  } // Add to the private list of syntax tokens\n\n\n  tokens.push({\n    regex: copyRegex(regex, {\n      addG: true,\n      addY: hasNativeY,\n      isInternalOnly: true\n    }),\n    handler: handler,\n    scope: options.scope || defaultScope,\n    flag: options.flag,\n    reparse: options.reparse,\n    leadChar: options.leadChar\n  }); // Reset the pattern cache used by the `XRegExp` constructor, since the same pattern and flags\n  // might now produce different results\n\n  XRegExp.cache.flush('patterns');\n};\n/**\n * Caches and returns the result of calling `XRegExp(pattern, flags)`. On any subsequent call with\n * the same pattern and flag combination, the cached copy of the regex is returned.\n *\n * @memberOf XRegExp\n * @param {String} pattern Regex pattern string.\n * @param {String} [flags] Any combination of XRegExp flags.\n * @returns {RegExp} Cached XRegExp object.\n * @example\n *\n * let match;\n * while (match = XRegExp.cache('.', 'gs').exec('abc')) {\n *   // The regex is compiled once only\n * }\n */\n\n\nXRegExp.cache = function (pattern, flags) {\n  if (!regexCache[pattern]) {\n    regexCache[pattern] = {};\n  }\n\n  return regexCache[pattern][flags] || (regexCache[pattern][flags] = XRegExp(pattern, flags));\n}; // Intentionally undocumented; used in tests\n\n\nXRegExp.cache.flush = function (cacheName) {\n  if (cacheName === 'patterns') {\n    // Flush the pattern cache used by the `XRegExp` constructor\n    patternCache = {};\n  } else {\n    // Flush the regex cache populated by `XRegExp.cache`\n    regexCache = {};\n  }\n};\n/**\n * Escapes any regular expression metacharacters, for use when matching literal strings. The result\n * can safely be used at any position within a regex that uses any flags.\n *\n * @memberOf XRegExp\n * @param {String} str String to escape.\n * @returns {string} String with regex metacharacters escaped.\n * @example\n *\n * XRegExp.escape('Escaped? <.>');\n * // -> 'Escaped\\?\\u0020<\\.>'\n */\n// Following are the contexts where each metacharacter needs to be escaped because it would\n// otherwise have a special meaning, change the meaning of surrounding characters, or cause an\n// error. Context 'default' means outside character classes only.\n// - `\\` - context: all\n// - `[()*+?.$|` - context: default\n// - `]` - context: default with flag u or if forming the end of a character class\n// - `{}` - context: default with flag u or if part of a valid/complete quantifier pattern\n// - `,` - context: default if in a position that causes an unescaped `{` to turn into a quantifier.\n//   Ex: `/^a{1\\,2}$/` matches `'a{1,2}'`, but `/^a{1,2}$/` matches `'a'` or `'aa'`\n// - `#` and <whitespace> - context: default with flag x\n// - `^` - context: default, and context: class if it's the first character in the class\n// - `-` - context: class if part of a valid character class range\n\n\nXRegExp.escape = function (str) {\n  return String(nullThrows(str)). // Escape most special chars with a backslash\n  replace(/[\\\\\\[\\]{}()*+?.^$|]/g, '\\\\$&'). // Convert to \\uNNNN for special chars that can't be escaped when used with ES6 flag `u`\n  replace(/[\\s#\\-,]/g, function (match) {\n    return \"\\\\u\".concat(pad4(hex(match.charCodeAt(0))));\n  });\n};\n/**\n * Executes a regex search in a specified string. Returns a match array or `null`. If the provided\n * regex uses named capture, named capture properties are included on the match array's `groups`\n * property. Optional `pos` and `sticky` arguments specify the search start position, and whether\n * the match must start at the specified position only. The `lastIndex` property of the provided\n * regex is not used, but is updated for compatibility. Also fixes browser bugs compared to the\n * native `RegExp.prototype.exec` and can be used reliably cross-browser.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {RegExp} regex Regex to search with.\n * @param {Number} [pos=0] Zero-based index at which to start the search.\n * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position\n *   only. The string `'sticky'` is accepted as an alternative to `true`.\n * @returns {Array} Match array with named capture properties on the `groups` object, or `null`. If\n *   the `namespacing` feature is off, named capture properties are directly on the match array.\n * @example\n *\n * // Basic use, with named capturing group\n * let match = XRegExp.exec('U+2620', XRegExp('U\\\\+(?<hex>[0-9A-F]{4})'));\n * match.groups.hex; // -> '2620'\n *\n * // With pos and sticky, in a loop\n * let pos = 2, result = [], match;\n * while (match = XRegExp.exec('<1><2><3><4>5<6>', /<(\\d)>/, pos, 'sticky')) {\n *   result.push(match[1]);\n *   pos = match.index + match[0].length;\n * }\n * // result -> ['2', '3', '4']\n */\n\n\nXRegExp.exec = function (str, regex, pos, sticky) {\n  var cacheKey = 'g';\n  var addY = false;\n  var fakeY = false;\n  var match;\n  addY = hasNativeY && !!(sticky || regex.sticky && sticky !== false);\n\n  if (addY) {\n    cacheKey += 'y';\n  } else if (sticky) {\n    // Simulate sticky matching by appending an empty capture to the original regex. The\n    // resulting regex will succeed no matter what at the current index (set with `lastIndex`),\n    // and will not search the rest of the subject string. We'll know that the original regex\n    // has failed if that last capture is `''` rather than `undefined` (i.e., if that last\n    // capture participated in the match).\n    fakeY = true;\n    cacheKey += 'FakeY';\n  }\n\n  regex[REGEX_DATA] = regex[REGEX_DATA] || {}; // Shares cached copies with `XRegExp.match`/`replace`\n\n  var r2 = regex[REGEX_DATA][cacheKey] || (regex[REGEX_DATA][cacheKey] = copyRegex(regex, {\n    addG: true,\n    addY: addY,\n    source: fakeY ? \"\".concat(regex.source, \"|()\") : undefined,\n    removeY: sticky === false,\n    isInternalOnly: true\n  }));\n  pos = pos || 0;\n  r2.lastIndex = pos; // Fixed `exec` required for `lastIndex` fix, named backreferences, etc.\n\n  match = fixed.exec.call(r2, str); // Get rid of the capture added by the pseudo-sticky matcher if needed. An empty string means\n  // the original regexp failed (see above).\n\n  if (fakeY && match && match.pop() === '') {\n    match = null;\n  }\n\n  if (regex.global) {\n    regex.lastIndex = match ? r2.lastIndex : 0;\n  }\n\n  return match;\n};\n/**\n * Executes a provided function once per regex match. Searches always start at the beginning of the\n * string and continue until the end, regardless of the state of the regex's `global` property and\n * initial `lastIndex`.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {RegExp} regex Regex to search with.\n * @param {Function} callback Function to execute for each match. Invoked with four arguments:\n *   - The match array, with named backreference properties.\n *   - The zero-based match index.\n *   - The string being traversed.\n *   - The regex object being used to traverse the string.\n * @example\n *\n * // Extracts every other digit from a string\n * const evens = [];\n * XRegExp.forEach('1a2345', /\\d/, (match, i) => {\n *   if (i % 2) evens.push(+match[0]);\n * });\n * // evens -> [2, 4]\n */\n\n\nXRegExp.forEach = function (str, regex, callback) {\n  var pos = 0;\n  var i = -1;\n  var match;\n\n  while (match = XRegExp.exec(str, regex, pos)) {\n    // Because `regex` is provided to `callback`, the function could use the deprecated/\n    // nonstandard `RegExp.prototype.compile` to mutate the regex. However, since `XRegExp.exec`\n    // doesn't use `lastIndex` to set the search position, this can't lead to an infinite loop,\n    // at least. Actually, because of the way `XRegExp.exec` caches globalized versions of\n    // regexes, mutating the regex will not have any effect on the iteration or matched strings,\n    // which is a nice side effect that brings extra safety.\n    callback(match, ++i, str, regex);\n    pos = match.index + (match[0].length || 1);\n  }\n};\n/**\n * Copies a regex object and adds flag `g`. The copy maintains extended data, is augmented with\n * `XRegExp.prototype` properties, and has a fresh `lastIndex` property (set to zero). Native\n * regexes are not recompiled using XRegExp syntax.\n *\n * @memberOf XRegExp\n * @param {RegExp} regex Regex to globalize.\n * @returns {RegExp} Copy of the provided regex with flag `g` added.\n * @example\n *\n * const globalCopy = XRegExp.globalize(/regex/);\n * globalCopy.global; // -> true\n */\n\n\nXRegExp.globalize = function (regex) {\n  return copyRegex(regex, {\n    addG: true\n  });\n};\n/**\n * Installs optional features according to the specified options. Can be undone using\n * `XRegExp.uninstall`.\n *\n * @memberOf XRegExp\n * @param {Object|String} options Options object or string.\n * @example\n *\n * // With an options object\n * XRegExp.install({\n *   // Enables support for astral code points in Unicode addons (implicitly sets flag A)\n *   astral: true,\n *\n *   // Adds named capture groups to the `groups` property of matches\n *   namespacing: true\n * });\n *\n * // With an options string\n * XRegExp.install('astral namespacing');\n */\n\n\nXRegExp.install = function (options) {\n  options = prepareOptions(options);\n\n  if (!features.astral && options.astral) {\n    setAstral(true);\n  }\n\n  if (!features.namespacing && options.namespacing) {\n    setNamespacing(true);\n  }\n};\n/**\n * Checks whether an individual optional feature is installed.\n *\n * @memberOf XRegExp\n * @param {String} feature Name of the feature to check. One of:\n *   - `astral`\n *   - `namespacing`\n * @returns {boolean} Whether the feature is installed.\n * @example\n *\n * XRegExp.isInstalled('astral');\n */\n\n\nXRegExp.isInstalled = function (feature) {\n  return !!features[feature];\n};\n/**\n * Returns `true` if an object is a regex; `false` if it isn't. This works correctly for regexes\n * created in another frame, when `instanceof` and `constructor` checks would fail.\n *\n * @memberOf XRegExp\n * @param {*} value Object to check.\n * @returns {boolean} Whether the object is a `RegExp` object.\n * @example\n *\n * XRegExp.isRegExp('string'); // -> false\n * XRegExp.isRegExp(/regex/i); // -> true\n * XRegExp.isRegExp(RegExp('^', 'm')); // -> true\n * XRegExp.isRegExp(XRegExp('(?s).')); // -> true\n */\n\n\nXRegExp.isRegExp = function (value) {\n  return Object.prototype.toString.call(value) === '[object RegExp]';\n}; // Same as `isType(value, 'RegExp')`, but avoiding that function call here for perf since\n// `isRegExp` is used heavily by internals including regex construction\n\n/**\n * Returns the first matched string, or in global mode, an array containing all matched strings.\n * This is essentially a more convenient re-implementation of `String.prototype.match` that gives\n * the result types you actually want (string instead of `exec`-style array in match-first mode,\n * and an empty array instead of `null` when no matches are found in match-all mode). It also lets\n * you override flag g and ignore `lastIndex`, and fixes browser bugs.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {RegExp} regex Regex to search with.\n * @param {String} [scope='one'] Use 'one' to return the first match as a string. Use 'all' to\n *   return an array of all matched strings. If not explicitly specified and `regex` uses flag g,\n *   `scope` is 'all'.\n * @returns {String|Array} In match-first mode: First match as a string, or `null`. In match-all\n *   mode: Array of all matched strings, or an empty array.\n * @example\n *\n * // Match first\n * XRegExp.match('abc', /\\w/); // -> 'a'\n * XRegExp.match('abc', /\\w/g, 'one'); // -> 'a'\n * XRegExp.match('abc', /x/g, 'one'); // -> null\n *\n * // Match all\n * XRegExp.match('abc', /\\w/g); // -> ['a', 'b', 'c']\n * XRegExp.match('abc', /\\w/, 'all'); // -> ['a', 'b', 'c']\n * XRegExp.match('abc', /x/, 'all'); // -> []\n */\n\n\nXRegExp.match = function (str, regex, scope) {\n  var global = regex.global && scope !== 'one' || scope === 'all';\n  var cacheKey = (global ? 'g' : '') + (regex.sticky ? 'y' : '') || 'noGY';\n  regex[REGEX_DATA] = regex[REGEX_DATA] || {}; // Shares cached copies with `XRegExp.exec`/`replace`\n\n  var r2 = regex[REGEX_DATA][cacheKey] || (regex[REGEX_DATA][cacheKey] = copyRegex(regex, {\n    addG: !!global,\n    removeG: scope === 'one',\n    isInternalOnly: true\n  }));\n  var result = String(nullThrows(str)).match(r2);\n\n  if (regex.global) {\n    regex.lastIndex = scope === 'one' && result ? // Can't use `r2.lastIndex` since `r2` is nonglobal in this case\n    result.index + result[0].length : 0;\n  }\n\n  return global ? result || [] : result && result[0];\n};\n/**\n * Retrieves the matches from searching a string using a chain of regexes that successively search\n * within previous matches. The provided `chain` array can contain regexes and or objects with\n * `regex` and `backref` properties. When a backreference is specified, the named or numbered\n * backreference is passed forward to the next regex or returned.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {Array} chain Regexes that each search for matches within preceding results.\n * @returns {Array} Matches by the last regex in the chain, or an empty array.\n * @example\n *\n * // Basic usage; matches numbers within <b> tags\n * XRegExp.matchChain('1 <b>2</b> 3 <b>4 a 56</b>', [\n *   XRegExp('(?is)<b>.*?</b>'),\n *   /\\d+/\n * ]);\n * // -> ['2', '4', '56']\n *\n * // Passing forward and returning specific backreferences\n * const html = `<a href=\"http://xregexp.com/api/\">XRegExp</a>\n *               <a href=\"http://www.google.com/\">Google</a>`;\n * XRegExp.matchChain(html, [\n *   {regex: /<a href=\"([^\"]+)\">/i, backref: 1},\n *   {regex: XRegExp('(?i)^https?://(?<domain>[^/?#]+)'), backref: 'domain'}\n * ]);\n * // -> ['xregexp.com', 'www.google.com']\n */\n\n\nXRegExp.matchChain = function (str, chain) {\n  return function recurseChain(values, level) {\n    var item = chain[level].regex ? chain[level] : {\n      regex: chain[level]\n    };\n    var matches = [];\n\n    function addMatch(match) {\n      if (item.backref) {\n        var ERR_UNDEFINED_GROUP = \"Backreference to undefined group: \".concat(item.backref);\n        var isNamedBackref = isNaN(item.backref);\n\n        if (isNamedBackref && XRegExp.isInstalled('namespacing')) {\n          // `groups` has `null` as prototype, so using `in` instead of `hasOwnProperty`\n          if (!(match.groups && item.backref in match.groups)) {\n            throw new ReferenceError(ERR_UNDEFINED_GROUP);\n          }\n        } else if (!match.hasOwnProperty(item.backref)) {\n          throw new ReferenceError(ERR_UNDEFINED_GROUP);\n        }\n\n        var backrefValue = isNamedBackref && XRegExp.isInstalled('namespacing') ? match.groups[item.backref] : match[item.backref];\n        matches.push(backrefValue || '');\n      } else {\n        matches.push(match[0]);\n      }\n    }\n\n    var _iterator3 = _createForOfIteratorHelper(values),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var value = _step3.value;\n        (0, _forEach[\"default\"])(XRegExp).call(XRegExp, value, item.regex, addMatch);\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n\n    return level === chain.length - 1 || !matches.length ? matches : recurseChain(matches, level + 1);\n  }([str], 0);\n};\n/**\n * Returns a new string with one or all matches of a pattern replaced. The pattern can be a string\n * or regex, and the replacement can be a string or a function to be called for each match. To\n * perform a global search and replace, use the optional `scope` argument or include flag g if using\n * a regex. Replacement strings can use `$<n>` or `${n}` for named and numbered backreferences.\n * Replacement functions can use named backreferences via the last argument. Also fixes browser bugs\n * compared to the native `String.prototype.replace` and can be used reliably cross-browser.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {RegExp|String} search Search pattern to be replaced.\n * @param {String|Function} replacement Replacement string or a function invoked to create it.\n *   Replacement strings can include special replacement syntax:\n *     - $$ - Inserts a literal $ character.\n *     - $&, $0 - Inserts the matched substring.\n *     - $` - Inserts the string that precedes the matched substring (left context).\n *     - $' - Inserts the string that follows the matched substring (right context).\n *     - $n, $nn - Where n/nn are digits referencing an existing capturing group, inserts\n *       backreference n/nn.\n *     - $<n>, ${n} - Where n is a name or any number of digits that reference an existing capturing\n *       group, inserts backreference n.\n *   Replacement functions are invoked with three or more arguments:\n *     - args[0] - The matched substring (corresponds to `$&` above). If the `namespacing` feature\n *       is off, named backreferences are accessible as properties of this argument.\n *     - args[1..n] - One argument for each backreference (corresponding to `$1`, `$2`, etc. above).\n *       If the regex has no capturing groups, no arguments appear in this position.\n *     - args[n+1] - The zero-based index of the match within the entire search string.\n *     - args[n+2] - The total string being searched.\n *     - args[n+3] - If the the search pattern is a regex with named capturing groups, the last\n *       argument is the groups object. Its keys are the backreference names and its values are the\n *       backreference values. If the `namespacing` feature is off, this argument is not present.\n * @param {String} [scope] Use 'one' to replace the first match only, or 'all'. Defaults to 'one'.\n *   Defaults to 'all' if using a regex with flag g.\n * @returns {String} New string with one or all matches replaced.\n * @example\n *\n * // Regex search, using named backreferences in replacement string\n * const name = XRegExp('(?<first>\\\\w+) (?<last>\\\\w+)');\n * XRegExp.replace('John Smith', name, '$<last>, $<first>');\n * // -> 'Smith, John'\n *\n * // Regex search, using named backreferences in replacement function\n * XRegExp.replace('John Smith', name, (...args) => {\n *   const groups = args[args.length - 1];\n *   return `${groups.last}, ${groups.first}`;\n * });\n * // -> 'Smith, John'\n *\n * // String search, with replace-all\n * XRegExp.replace('RegExp builds RegExps', 'RegExp', 'XRegExp', 'all');\n * // -> 'XRegExp builds XRegExps'\n */\n\n\nXRegExp.replace = function (str, search, replacement, scope) {\n  var isRegex = XRegExp.isRegExp(search);\n  var global = search.global && scope !== 'one' || scope === 'all';\n  var cacheKey = (global ? 'g' : '') + (search.sticky ? 'y' : '') || 'noGY';\n  var s2 = search;\n\n  if (isRegex) {\n    search[REGEX_DATA] = search[REGEX_DATA] || {}; // Shares cached copies with `XRegExp.exec`/`match`. Since a copy is used, `search`'s\n    // `lastIndex` isn't updated *during* replacement iterations\n\n    s2 = search[REGEX_DATA][cacheKey] || (search[REGEX_DATA][cacheKey] = copyRegex(search, {\n      addG: !!global,\n      removeG: scope === 'one',\n      isInternalOnly: true\n    }));\n  } else if (global) {\n    s2 = new RegExp(XRegExp.escape(String(search)), 'g');\n  } // Fixed `replace` required for named backreferences, etc.\n\n\n  var result = fixed.replace.call(nullThrows(str), s2, replacement);\n\n  if (isRegex && search.global) {\n    // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)\n    search.lastIndex = 0;\n  }\n\n  return result;\n};\n/**\n * Performs batch processing of string replacements. Used like `XRegExp.replace`, but accepts an\n * array of replacement details. Later replacements operate on the output of earlier replacements.\n * Replacement details are accepted as an array with a regex or string to search for, the\n * replacement string or function, and an optional scope of 'one' or 'all'. Uses the XRegExp\n * replacement text syntax, which supports named backreference properties via `$<name>` or\n * `${name}`.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {Array} replacements Array of replacement detail arrays.\n * @returns {String} New string with all replacements.\n * @example\n *\n * str = XRegExp.replaceEach(str, [\n *   [XRegExp('(?<name>a)'), 'z$<name>'],\n *   [/b/gi, 'y'],\n *   [/c/g, 'x', 'one'], // scope 'one' overrides /g\n *   [/d/, 'w', 'all'],  // scope 'all' overrides lack of /g\n *   ['e', 'v', 'all'],  // scope 'all' allows replace-all for strings\n *   [/f/g, (match) => match.toUpperCase()]\n * ]);\n */\n\n\nXRegExp.replaceEach = function (str, replacements) {\n  var _iterator4 = _createForOfIteratorHelper(replacements),\n      _step4;\n\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var r = _step4.value;\n      str = XRegExp.replace(str, r[0], r[1], r[2]);\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n\n  return str;\n};\n/**\n * Splits a string into an array of strings using a regex or string separator. Matches of the\n * separator are not included in the result array. However, if `separator` is a regex that contains\n * capturing groups, backreferences are spliced into the result each time `separator` is matched.\n * Fixes browser bugs compared to the native `String.prototype.split` and can be used reliably\n * cross-browser.\n *\n * @memberOf XRegExp\n * @param {String} str String to split.\n * @param {RegExp|String} separator Regex or string to use for separating the string.\n * @param {Number} [limit] Maximum number of items to include in the result array.\n * @returns {Array} Array of substrings.\n * @example\n *\n * // Basic use\n * XRegExp.split('a b c', ' ');\n * // -> ['a', 'b', 'c']\n *\n * // With limit\n * XRegExp.split('a b c', ' ', 2);\n * // -> ['a', 'b']\n *\n * // Backreferences in result array\n * XRegExp.split('..word1..', /([a-z]+)(\\d+)/i);\n * // -> ['..', 'word', '1', '..']\n */\n\n\nXRegExp.split = function (str, separator, limit) {\n  return fixed.split.call(nullThrows(str), separator, limit);\n};\n/**\n * Executes a regex search in a specified string. Returns `true` or `false`. Optional `pos` and\n * `sticky` arguments specify the search start position, and whether the match must start at the\n * specified position only. The `lastIndex` property of the provided regex is not used, but is\n * updated for compatibility. Also fixes browser bugs compared to the native\n * `RegExp.prototype.test` and can be used reliably cross-browser.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {RegExp} regex Regex to search with.\n * @param {Number} [pos=0] Zero-based index at which to start the search.\n * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position\n *   only. The string `'sticky'` is accepted as an alternative to `true`.\n * @returns {boolean} Whether the regex matched the provided value.\n * @example\n *\n * // Basic use\n * XRegExp.test('abc', /c/); // -> true\n *\n * // With pos and sticky\n * XRegExp.test('abc', /c/, 0, 'sticky'); // -> false\n * XRegExp.test('abc', /c/, 2, 'sticky'); // -> true\n */\n// Do this the easy way :-)\n\n\nXRegExp.test = function (str, regex, pos, sticky) {\n  return !!XRegExp.exec(str, regex, pos, sticky);\n};\n/**\n * Uninstalls optional features according to the specified options. Used to undo the actions of\n * `XRegExp.install`.\n *\n * @memberOf XRegExp\n * @param {Object|String} options Options object or string.\n * @example\n *\n * // With an options object\n * XRegExp.uninstall({\n *   // Disables support for astral code points in Unicode addons (unless enabled per regex)\n *   astral: true,\n *\n *   // Don't add named capture groups to the `groups` property of matches\n *   namespacing: true\n * });\n *\n * // With an options string\n * XRegExp.uninstall('astral namespacing');\n */\n\n\nXRegExp.uninstall = function (options) {\n  options = prepareOptions(options);\n\n  if (features.astral && options.astral) {\n    setAstral(false);\n  }\n\n  if (features.namespacing && options.namespacing) {\n    setNamespacing(false);\n  }\n};\n/**\n * Returns an XRegExp object that is the union of the given patterns. Patterns can be provided as\n * regex objects or strings. Metacharacters are escaped in patterns provided as strings.\n * Backreferences in provided regex objects are automatically renumbered to work correctly within\n * the larger combined pattern. Native flags used by provided regexes are ignored in favor of the\n * `flags` argument.\n *\n * @memberOf XRegExp\n * @param {Array} patterns Regexes and strings to combine.\n * @param {String} [flags] Any combination of XRegExp flags.\n * @param {Object} [options] Options object with optional properties:\n *   - `conjunction` {String} Type of conjunction to use: 'or' (default) or 'none'.\n * @returns {RegExp} Union of the provided regexes and strings.\n * @example\n *\n * XRegExp.union(['a+b*c', /(dogs)\\1/, /(cats)\\1/], 'i');\n * // -> /a\\+b\\*c|(dogs)\\1|(cats)\\2/i\n *\n * XRegExp.union([/man/, /bear/, /pig/], 'i', {conjunction: 'none'});\n * // -> /manbearpig/i\n */\n\n\nXRegExp.union = function (patterns, flags, options) {\n  options = options || {};\n  var conjunction = options.conjunction || 'or';\n  var numCaptures = 0;\n  var numPriorCaptures;\n  var captureNames;\n\n  function rewrite(match, paren, backref) {\n    var name = captureNames[numCaptures - numPriorCaptures]; // Capturing group\n\n    if (paren) {\n      ++numCaptures; // If the current capture has a name, preserve the name\n\n      if (name) {\n        return \"(?<\".concat(name, \">\");\n      } // Backreference\n\n    } else if (backref) {\n      // Rewrite the backreference\n      return \"\\\\\".concat(+backref + numPriorCaptures);\n    }\n\n    return match;\n  }\n\n  if (!(isType(patterns, 'Array') && patterns.length)) {\n    throw new TypeError('Must provide a nonempty array of patterns to merge');\n  }\n\n  var parts = /(\\()(?!\\?)|\\\\([1-9]\\d*)|\\\\[\\s\\S]|\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/g;\n  var output = [];\n\n  var _iterator5 = _createForOfIteratorHelper(patterns),\n      _step5;\n\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var pattern = _step5.value;\n\n      if (XRegExp.isRegExp(pattern)) {\n        numPriorCaptures = numCaptures;\n        captureNames = pattern[REGEX_DATA] && pattern[REGEX_DATA].captureNames || []; // Rewrite backreferences. Passing to XRegExp dies on octals and ensures patterns are\n        // independently valid; helps keep this simple. Named captures are put back\n\n        output.push(XRegExp(pattern.source).source.replace(parts, rewrite));\n      } else {\n        output.push(XRegExp.escape(pattern));\n      }\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n\n  var separator = conjunction === 'none' ? '' : '|';\n  return XRegExp(output.join(separator), flags);\n}; // ==--------------------------==\n// Fixed/extended native methods\n// ==--------------------------==\n\n/**\n * Adds named capture support (with backreferences returned as `result.name`), and fixes browser\n * bugs in the native `RegExp.prototype.exec`. Use via `XRegExp.exec`.\n *\n * @memberOf RegExp\n * @param {String} str String to search.\n * @returns {Array} Match array with named backreference properties, or `null`.\n */\n\n\nfixed.exec = function (str) {\n  var origLastIndex = this.lastIndex;\n  var match = RegExp.prototype.exec.apply(this, arguments);\n\n  if (match) {\n    // Fix browsers whose `exec` methods don't return `undefined` for nonparticipating capturing\n    // groups. This fixes IE 5.5-8, but not IE 9's quirks mode or emulation of older IEs. IE 9\n    // in standards mode follows the spec.\n    if (!correctExecNpcg && match.length > 1 && (0, _indexOf[\"default\"])(match).call(match, '') !== -1) {\n      var _context3;\n\n      var r2 = copyRegex(this, {\n        removeG: true,\n        isInternalOnly: true\n      }); // Using `str.slice(match.index)` rather than `match[0]` in case lookahead allowed\n      // matching due to characters outside the match\n\n      (0, _slice[\"default\"])(_context3 = String(str)).call(_context3, match.index).replace(r2, function () {\n        var len = arguments.length; // Skip index 0 and the last 2\n\n        for (var i = 1; i < len - 2; ++i) {\n          if ((i < 0 || arguments.length <= i ? undefined : arguments[i]) === undefined) {\n            match[i] = undefined;\n          }\n        }\n      });\n    } // Attach named capture properties\n\n\n    if (this[REGEX_DATA] && this[REGEX_DATA].captureNames) {\n      var groupsObject = match;\n\n      if (XRegExp.isInstalled('namespacing')) {\n        // https://tc39.github.io/proposal-regexp-named-groups/#sec-regexpbuiltinexec\n        match.groups = (0, _create[\"default\"])(null);\n        groupsObject = match.groups;\n      } // Skip index 0\n\n\n      for (var i = 1; i < match.length; ++i) {\n        var name = this[REGEX_DATA].captureNames[i - 1];\n\n        if (name) {\n          groupsObject[name] = match[i];\n        }\n      } // Preserve any existing `groups` obj that came from native ES2018 named capture\n\n    } else if (!match.groups && XRegExp.isInstalled('namespacing')) {\n      match.groups = undefined;\n    } // Fix browsers that increment `lastIndex` after zero-length matches\n\n\n    if (this.global && !match[0].length && this.lastIndex > match.index) {\n      this.lastIndex = match.index;\n    }\n  }\n\n  if (!this.global) {\n    // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)\n    this.lastIndex = origLastIndex;\n  }\n\n  return match;\n};\n/**\n * Fixes browser bugs in the native `RegExp.prototype.test`.\n *\n * @memberOf RegExp\n * @param {String} str String to search.\n * @returns {boolean} Whether the regex matched the provided value.\n */\n\n\nfixed.test = function (str) {\n  // Do this the easy way :-)\n  return !!fixed.exec.call(this, str);\n};\n/**\n * Adds named capture support (with backreferences returned as `result.name`), and fixes browser\n * bugs in the native `String.prototype.match`.\n *\n * @memberOf String\n * @param {RegExp|*} regex Regex to search with. If not a regex object, it is passed to `RegExp`.\n * @returns {Array} If `regex` uses flag g, an array of match strings or `null`. Without flag g,\n *   the result of calling `regex.exec(this)`.\n */\n\n\nfixed.match = function (regex) {\n  if (!XRegExp.isRegExp(regex)) {\n    // Use the native `RegExp` rather than `XRegExp`\n    regex = new RegExp(regex);\n  } else if (regex.global) {\n    var result = String.prototype.match.apply(this, arguments); // Fixes IE bug\n\n    regex.lastIndex = 0;\n    return result;\n  }\n\n  return fixed.exec.call(regex, nullThrows(this));\n};\n/**\n * Adds support for `${n}` (or `$<n>`) tokens for named and numbered backreferences in replacement\n * text, and provides named backreferences to replacement functions as `arguments[0].name`. Also\n * fixes browser bugs in replacement text syntax when performing a replacement using a nonregex\n * search value, and the value of a replacement regex's `lastIndex` property during replacement\n * iterations and upon completion. Note that this doesn't support SpiderMonkey's proprietary third\n * (`flags`) argument. Use via `XRegExp.replace`.\n *\n * @memberOf String\n * @param {RegExp|String} search Search pattern to be replaced.\n * @param {String|Function} replacement Replacement string or a function invoked to create it.\n * @returns {string} New string with one or all matches replaced.\n */\n\n\nfixed.replace = function (search, replacement) {\n  var isRegex = XRegExp.isRegExp(search);\n  var origLastIndex;\n  var captureNames;\n  var result;\n\n  if (isRegex) {\n    if (search[REGEX_DATA]) {\n      captureNames = search[REGEX_DATA].captureNames;\n    } // Only needed if `search` is nonglobal\n\n\n    origLastIndex = search.lastIndex;\n  } else {\n    search += ''; // Type-convert\n  } // Don't use `typeof`; some older browsers return 'function' for regex objects\n\n\n  if (isType(replacement, 'Function')) {\n    // Stringifying `this` fixes a bug in IE < 9 where the last argument in replacement\n    // functions isn't type-converted to a string\n    result = String(this).replace(search, function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      if (captureNames) {\n        var groupsObject;\n\n        if (XRegExp.isInstalled('namespacing')) {\n          // https://tc39.github.io/proposal-regexp-named-groups/#sec-regexpbuiltinexec\n          groupsObject = (0, _create[\"default\"])(null);\n          args.push(groupsObject);\n        } else {\n          // Change the `args[0]` string primitive to a `String` object that can store\n          // properties. This really does need to use `String` as a constructor\n          args[0] = new String(args[0]);\n          groupsObject = args[0];\n        } // Store named backreferences\n\n\n        for (var i = 0; i < captureNames.length; ++i) {\n          if (captureNames[i]) {\n            groupsObject[captureNames[i]] = args[i + 1];\n          }\n        }\n      } // ES6 specs the context for replacement functions as `undefined`\n\n\n      return replacement.apply(void 0, args);\n    });\n  } else {\n    // Ensure that the last value of `args` will be a string when given nonstring `this`,\n    // while still throwing on null or undefined context\n    result = String(nullThrows(this)).replace(search, function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return String(replacement).replace(replacementToken, replacer);\n\n      function replacer($0, bracketed, angled, dollarToken) {\n        bracketed = bracketed || angled; // ES2018 added a new trailing `groups` arg that's passed to replacement functions\n        // when the search regex uses native named capture\n\n        var numNonCaptureArgs = isType(args[args.length - 1], 'Object') ? 4 : 3;\n        var numCaptures = args.length - numNonCaptureArgs; // Handle named or numbered backreference with curly or angled braces: ${n}, $<n>\n\n        if (bracketed) {\n          // Handle backreference to numbered capture, if `bracketed` is an integer. Use\n          // `0` for the entire match. Any number of leading zeros may be used.\n          if (/^\\d+$/.test(bracketed)) {\n            // Type-convert and drop leading zeros\n            var _n = +bracketed;\n\n            if (_n <= numCaptures) {\n              return args[_n] || '';\n            }\n          } // Handle backreference to named capture. If the name does not refer to an\n          // existing capturing group, it's an error. Also handles the error for numbered\n          // backference that does not refer to an existing group.\n          // Using `indexOf` since having groups with the same name is already an error,\n          // otherwise would need `lastIndexOf`.\n\n\n          var n = captureNames ? (0, _indexOf[\"default\"])(captureNames).call(captureNames, bracketed) : -1;\n\n          if (n < 0) {\n            throw new SyntaxError(\"Backreference to undefined group \".concat($0));\n          }\n\n          return args[n + 1] || '';\n        } // Handle `$`-prefixed variable\n        // Handle space/blank first because type conversion with `+` drops space padding\n        // and converts spaces and empty strings to `0`\n\n\n        if (dollarToken === '' || dollarToken === ' ') {\n          throw new SyntaxError(\"Invalid token \".concat($0));\n        }\n\n        if (dollarToken === '&' || +dollarToken === 0) {\n          // $&, $0 (not followed by 1-9), $00\n          return args[0];\n        }\n\n        if (dollarToken === '$') {\n          // $$\n          return '$';\n        }\n\n        if (dollarToken === '`') {\n          var _context4;\n\n          // $` (left context)\n          return (0, _slice[\"default\"])(_context4 = args[args.length - 1]).call(_context4, 0, args[args.length - 2]);\n        }\n\n        if (dollarToken === \"'\") {\n          var _context5;\n\n          // $' (right context)\n          return (0, _slice[\"default\"])(_context5 = args[args.length - 1]).call(_context5, args[args.length - 2] + args[0].length);\n        } // Handle numbered backreference without braces\n        // Type-convert and drop leading zero\n\n\n        dollarToken = +dollarToken; // XRegExp behavior for `$n` and `$nn`:\n        // - Backrefs end after 1 or 2 digits. Use `${..}` or `$<..>` for more digits.\n        // - `$1` is an error if no capturing groups.\n        // - `$10` is an error if less than 10 capturing groups. Use `${1}0` or `$<1>0`\n        //   instead.\n        // - `$01` is `$1` if at least one capturing group, else it's an error.\n        // - `$0` (not followed by 1-9) and `$00` are the entire match.\n        // Native behavior, for comparison:\n        // - Backrefs end after 1 or 2 digits. Cannot reference capturing group 100+.\n        // - `$1` is a literal `$1` if no capturing groups.\n        // - `$10` is `$1` followed by a literal `0` if less than 10 capturing groups.\n        // - `$01` is `$1` if at least one capturing group, else it's a literal `$01`.\n        // - `$0` is a literal `$0`.\n\n        if (!isNaN(dollarToken)) {\n          if (dollarToken > numCaptures) {\n            throw new SyntaxError(\"Backreference to undefined group \".concat($0));\n          }\n\n          return args[dollarToken] || '';\n        } // `$` followed by an unsupported char is an error, unlike native JS\n\n\n        throw new SyntaxError(\"Invalid token \".concat($0));\n      }\n    });\n  }\n\n  if (isRegex) {\n    if (search.global) {\n      // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)\n      search.lastIndex = 0;\n    } else {\n      // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)\n      search.lastIndex = origLastIndex;\n    }\n  }\n\n  return result;\n};\n/**\n * Fixes browser bugs in the native `String.prototype.split`. Use via `XRegExp.split`.\n *\n * @memberOf String\n * @param {RegExp|String} separator Regex or string to use for separating the string.\n * @param {Number} [limit] Maximum number of items to include in the result array.\n * @returns {!Array} Array of substrings.\n */\n\n\nfixed.split = function (separator, limit) {\n  if (!XRegExp.isRegExp(separator)) {\n    // Browsers handle nonregex split correctly, so use the faster native method\n    return String.prototype.split.apply(this, arguments);\n  }\n\n  var str = String(this);\n  var output = [];\n  var origLastIndex = separator.lastIndex;\n  var lastLastIndex = 0;\n  var lastLength; // Values for `limit`, per the spec:\n  // If undefined: pow(2,32) - 1\n  // If 0, Infinity, or NaN: 0\n  // If positive number: limit = floor(limit); if (limit >= pow(2,32)) limit -= pow(2,32);\n  // If negative number: pow(2,32) - floor(abs(limit))\n  // If other: Type-convert, then use the above rules\n  // This line fails in very strange ways for some values of `limit` in Opera 10.5-10.63, unless\n  // Opera Dragonfly is open (go figure). It works in at least Opera 9.5-10.1 and 11+\n\n  limit = (limit === undefined ? -1 : limit) >>> 0;\n  (0, _forEach[\"default\"])(XRegExp).call(XRegExp, str, separator, function (match) {\n    // This condition is not the same as `if (match[0].length)`\n    if (match.index + match[0].length > lastLastIndex) {\n      output.push((0, _slice[\"default\"])(str).call(str, lastLastIndex, match.index));\n\n      if (match.length > 1 && match.index < str.length) {\n        Array.prototype.push.apply(output, (0, _slice[\"default\"])(match).call(match, 1));\n      }\n\n      lastLength = match[0].length;\n      lastLastIndex = match.index + lastLength;\n    }\n  });\n\n  if (lastLastIndex === str.length) {\n    if (!separator.test('') || lastLength) {\n      output.push('');\n    }\n  } else {\n    output.push((0, _slice[\"default\"])(str).call(str, lastLastIndex));\n  }\n\n  separator.lastIndex = origLastIndex;\n  return output.length > limit ? (0, _slice[\"default\"])(output).call(output, 0, limit) : output;\n}; // ==--------------------------==\n// Built-in syntax/flag tokens\n// ==--------------------------==\n\n/*\n * Letter escapes that natively match literal characters: `\\a`, `\\A`, etc. These should be\n * SyntaxErrors but are allowed in web reality. XRegExp makes them errors for cross-browser\n * consistency and to reserve their syntax, but lets them be superseded by addons.\n */\n\n\nXRegExp.addToken(/\\\\([ABCE-RTUVXYZaeg-mopqyz]|c(?![A-Za-z])|u(?![\\dA-Fa-f]{4}|{[\\dA-Fa-f]+})|x(?![\\dA-Fa-f]{2}))/, function (match, scope) {\n  // \\B is allowed in default scope only\n  if (match[1] === 'B' && scope === defaultScope) {\n    return match[0];\n  }\n\n  throw new SyntaxError(\"Invalid escape \".concat(match[0]));\n}, {\n  scope: 'all',\n  leadChar: '\\\\'\n});\n/*\n * Unicode code point escape with curly braces: `\\u{N..}`. `N..` is any one or more digit\n * hexadecimal number from 0-10FFFF, and can include leading zeros. Requires the native ES6 `u` flag\n * to support code points greater than U+FFFF. Avoids converting code points above U+FFFF to\n * surrogate pairs (which could be done without flag `u`), since that could lead to broken behavior\n * if you follow a `\\u{N..}` token that references a code point above U+FFFF with a quantifier, or\n * if you use the same in a character class.\n */\n\nXRegExp.addToken(/\\\\u{([\\dA-Fa-f]+)}/, function (match, scope, flags) {\n  var code = dec(match[1]);\n\n  if (code > 0x10FFFF) {\n    throw new SyntaxError(\"Invalid Unicode code point \".concat(match[0]));\n  }\n\n  if (code <= 0xFFFF) {\n    // Converting to \\uNNNN avoids needing to escape the literal character and keep it\n    // separate from preceding tokens\n    return \"\\\\u\".concat(pad4(hex(code)));\n  } // If `code` is between 0xFFFF and 0x10FFFF, require and defer to native handling\n\n\n  if (hasNativeU && (0, _indexOf[\"default\"])(flags).call(flags, 'u') !== -1) {\n    return match[0];\n  }\n\n  throw new SyntaxError('Cannot use Unicode code point above \\\\u{FFFF} without flag u');\n}, {\n  scope: 'all',\n  leadChar: '\\\\'\n});\n/*\n * Comment pattern: `(?# )`. Inline comments are an alternative to the line comments allowed in\n * free-spacing mode (flag x).\n */\n\nXRegExp.addToken(/\\(\\?#[^)]*\\)/, getContextualTokenSeparator, {\n  leadChar: '('\n});\n/*\n * Whitespace and line comments, in free-spacing mode (aka extended mode, flag x) only.\n */\n\nXRegExp.addToken(/\\s+|#[^\\n]*\\n?/, getContextualTokenSeparator, {\n  flag: 'x'\n});\n/*\n * Dot, in dotAll mode (aka singleline mode, flag s) only.\n */\n\nif (!hasNativeS) {\n  XRegExp.addToken(/\\./, function () {\n    return '[\\\\s\\\\S]';\n  }, {\n    flag: 's',\n    leadChar: '.'\n  });\n}\n/*\n * Named backreference: `\\k<name>`. Backreference names can use RegExpIdentifierName characters\n * only. Also allows numbered backreferences as `\\k<n>`.\n */\n\n\nXRegExp.addToken(/\\\\k<([^>]+)>/, function (match) {\n  var _context6, _context7;\n\n  // Groups with the same name is an error, else would need `lastIndexOf`\n  var index = isNaN(match[1]) ? (0, _indexOf[\"default\"])(_context6 = this.captureNames).call(_context6, match[1]) + 1 : +match[1];\n  var endIndex = match.index + match[0].length;\n\n  if (!index || index > this.captureNames.length) {\n    throw new SyntaxError(\"Backreference to undefined group \".concat(match[0]));\n  } // Keep backreferences separate from subsequent literal numbers. This avoids e.g.\n  // inadvertedly changing `(?<n>)\\k<n>1` to `()\\11`.\n\n\n  return (0, _concat[\"default\"])(_context7 = \"\\\\\".concat(index)).call(_context7, endIndex === match.input.length || isNaN(match.input[endIndex]) ? '' : '(?:)');\n}, {\n  leadChar: '\\\\'\n});\n/*\n * Numbered backreference or octal, plus any following digits: `\\0`, `\\11`, etc. Octals except `\\0`\n * not followed by 0-9 and backreferences to unopened capture groups throw an error. Other matches\n * are returned unaltered. IE < 9 doesn't support backreferences above `\\99` in regex syntax.\n */\n\nXRegExp.addToken(/\\\\(\\d+)/, function (match, scope) {\n  if (!(scope === defaultScope && /^[1-9]/.test(match[1]) && +match[1] <= this.captureNames.length) && match[1] !== '0') {\n    throw new SyntaxError(\"Cannot use octal escape or backreference to undefined group \".concat(match[0]));\n  }\n\n  return match[0];\n}, {\n  scope: 'all',\n  leadChar: '\\\\'\n});\n/*\n * Named capturing group; match the opening delimiter only: `(?<name>`. Capture names can use the\n * RegExpIdentifierName characters only. Names can't be integers. Supports Python-style\n * `(?P<name>` as an alternate syntax to avoid issues in some older versions of Opera which natively\n * supported the Python-style syntax. Otherwise, XRegExp might treat numbered backreferences to\n * Python-style named capture as octals.\n */\n\nXRegExp.addToken(/\\(\\?P?<((?:[\\$A-Z_a-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08C7\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D04-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1878\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BF\\u31F0-\\u31FF\\u3400-\\u4DBF\\u4E00-\\u9FFC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7BF\\uA7C2-\\uA7CA\\uA7F5-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB69\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDD00-\\uDD23\\uDE80-\\uDEA9\\uDEB0\\uDEB1\\uDF00-\\uDF1C\\uDF27\\uDF30-\\uDF45\\uDFB0-\\uDFC4\\uDFE0-\\uDFF6]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD44\\uDD47\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC5F-\\uDC61\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDEB8\\uDF00-\\uDF1A]|\\uD806[\\uDC00-\\uDC2B\\uDCA0-\\uDCDF\\uDCFF-\\uDD06\\uDD09\\uDD0C-\\uDD13\\uDD15\\uDD16\\uDD18-\\uDD2F\\uDD3F\\uDD41\\uDDA0-\\uDDA7\\uDDAA-\\uDDD0\\uDDE1\\uDDE3\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE89\\uDE9D\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDEE0-\\uDEF2\\uDFB0]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD822\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879\\uD880-\\uD883][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE7F\\uDF00-\\uDF4A\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1\\uDFE3]|\\uD821[\\uDC00-\\uDFF7]|\\uD823[\\uDC00-\\uDCD5\\uDD00-\\uDD08]|\\uD82C[\\uDC00-\\uDD1E\\uDD50-\\uDD52\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD838[\\uDD00-\\uDD2C\\uDD37-\\uDD3D\\uDD4E\\uDEC0-\\uDEEB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43\\uDD4B]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDEDD\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uD884[\\uDC00-\\uDF4A])(?:[\\$0-9A-Z_a-z\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u07FD\\u0800-\\u082D\\u0840-\\u085B\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08C7\\u08D3-\\u08E1\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u09FC\\u09FE\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9-\\u0AFF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B55-\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C80-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D00-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D54-\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D81-\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1878\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1ABF\\u1AC0\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CD0-\\u1CD2\\u1CD4-\\u1CFA\\u1D00-\\u1DF9\\u1DFB-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BF\\u31F0-\\u31FF\\u3400-\\u4DBF\\u4E00-\\u9FFC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7BF\\uA7C2-\\uA7CA\\uA7F5-\\uA827\\uA82C\\uA840-\\uA873\\uA880-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB69\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDD00-\\uDD27\\uDD30-\\uDD39\\uDE80-\\uDEA9\\uDEAB\\uDEAC\\uDEB0\\uDEB1\\uDF00-\\uDF1C\\uDF27\\uDF30-\\uDF50\\uDFB0-\\uDFC4\\uDFE0-\\uDFF6]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD44-\\uDD47\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDC9-\\uDDCC\\uDDCE-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE3E\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3B-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC00-\\uDC4A\\uDC50-\\uDC59\\uDC5E-\\uDC61\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB8\\uDEC0-\\uDEC9\\uDF00-\\uDF1A\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDC00-\\uDC3A\\uDCA0-\\uDCE9\\uDCFF-\\uDD06\\uDD09\\uDD0C-\\uDD13\\uDD15\\uDD16\\uDD18-\\uDD35\\uDD37\\uDD38\\uDD3B-\\uDD43\\uDD50-\\uDD59\\uDDA0-\\uDDA7\\uDDAA-\\uDDD7\\uDDDA-\\uDDE1\\uDDE3\\uDDE4\\uDE00-\\uDE3E\\uDE47\\uDE50-\\uDE99\\uDE9D\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC36\\uDC38-\\uDC40\\uDC50-\\uDC59\\uDC72-\\uDC8F\\uDC92-\\uDCA7\\uDCA9-\\uDCB6\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD36\\uDD3A\\uDD3C\\uDD3D\\uDD3F-\\uDD47\\uDD50-\\uDD59\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD8E\\uDD90\\uDD91\\uDD93-\\uDD98\\uDDA0-\\uDDA9\\uDEE0-\\uDEF6\\uDFB0]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD822\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879\\uD880-\\uD883][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE7F\\uDF00-\\uDF4A\\uDF4F-\\uDF87\\uDF8F-\\uDF9F\\uDFE0\\uDFE1\\uDFE3\\uDFE4\\uDFF0\\uDFF1]|\\uD821[\\uDC00-\\uDFF7]|\\uD823[\\uDC00-\\uDCD5\\uDD00-\\uDD08]|\\uD82C[\\uDC00-\\uDD1E\\uDD50-\\uDD52\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A\\uDD00-\\uDD2C\\uDD30-\\uDD3D\\uDD40-\\uDD49\\uDD4E\\uDEC0-\\uDEF9]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6\\uDD00-\\uDD4B\\uDD50-\\uDD59]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD83E[\\uDFF0-\\uDFF9]|\\uD869[\\uDC00-\\uDEDD\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uD884[\\uDC00-\\uDF4A]|\\uDB40[\\uDD00-\\uDDEF])*)>/, function (match) {\n  var _context8;\n\n  if (!XRegExp.isInstalled('namespacing') && (match[1] === 'length' || match[1] === '__proto__')) {\n    throw new SyntaxError(\"Cannot use reserved word as capture name \".concat(match[0]));\n  }\n\n  if ((0, _indexOf[\"default\"])(_context8 = this.captureNames).call(_context8, match[1]) !== -1) {\n    throw new SyntaxError(\"Cannot use same name for multiple groups \".concat(match[0]));\n  }\n\n  this.captureNames.push(match[1]);\n  this.hasNamedCapture = true;\n  return '(';\n}, {\n  leadChar: '('\n});\n/*\n * Capturing group; match the opening parenthesis only. Required for support of named capturing\n * groups. Also adds explicit capture mode (flag n).\n */\n\nXRegExp.addToken(/\\((?!\\?)/, function (match, scope, flags) {\n  if ((0, _indexOf[\"default\"])(flags).call(flags, 'n') !== -1) {\n    return '(?:';\n  }\n\n  this.captureNames.push(null);\n  return '(';\n}, {\n  optionalFlags: 'n',\n  leadChar: '('\n});\nvar _default = XRegExp;\nexports[\"default\"] = _default;\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}