{"ast":null,"code":"import { string, object, ref } from 'yup';\nimport XRegExp from 'xregexp';\nexport const SignupSchema = object().shape({\n  email: string().email('This field should be a valid email address.').required('This field must not be empty'),\n  // .matches(/^.{1,64}@/, 'The part before @ of the email can be maximum 64 characters.')\n  // .matches(/^.*[a-z]+.*@/, 'This field should be a valid email address.'),\n  role: string().required('This field must not be empty'),\n  password: string().min(8, 'This field must be at least 8 characters long').max(50, 'This field must be at most 50 characters long').required('This field must not be empty'),\n  confirmPassword: string().required('This field must not be empty').oneOf([ref('password'), null], 'Passwords must match')\n});\nexport const ProfileSchema = object().shape({\n  id: string().email('This field should be a valid email address.').required('This field must not be empty'),\n  // .matches(/^.{1,64}@/, 'The part before @ of the email can be maximum 64 characters.')\n  // .matches(/^.*[a-z]+.*@/, 'This field should be a valid email address.'),\n  name: string().required('This field must not be empty'),\n  role: string().required('This field must not be empty'),\n  cgpa: string().required('This field must not be empty'),\n  credit: string().required('This field must not be empty')\n});\nexport const LoginSchema = object().shape({\n  username: string().required('This field must not be empty'),\n  // .matches(/^.{1,64}@/, 'The part before @ of the email can be maximum 64 characters.')\n  // .matches(/^.*[a-z]+.*@/, 'This field should be a valid email address.'),\n  password: string().required('This field must not be empty')\n});","map":{"version":3,"sources":["E:/AcademicAdvisingSystem/client/src/schemas/schemas.js"],"names":["string","object","ref","XRegExp","SignupSchema","shape","email","required","role","password","min","max","confirmPassword","oneOf","ProfileSchema","id","name","cgpa","credit","LoginSchema","username"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,MAAjB,EAAyBC,GAAzB,QAAoC,KAApC;AACA,OAAOC,OAAP,MAAoB,SAApB;AAEA,OAAO,MAAMC,YAAY,GAAGH,MAAM,GAAGI,KAAT,CAAe;AACvCC,EAAAA,KAAK,EAAEN,MAAM,GACRM,KADE,CACI,6CADJ,EAEFC,QAFE,CAEO,8BAFP,CADgC;AAIvC;AACA;AACAC,EAAAA,IAAI,EAAER,MAAM,GACPO,QADC,CACQ,8BADR,CANiC;AAQvCE,EAAAA,QAAQ,EAAET,MAAM,GACXU,GADK,CACD,CADC,EACE,+CADF,EAELC,GAFK,CAED,EAFC,EAEG,+CAFH,EAGLJ,QAHK,CAGI,8BAHJ,CAR6B;AAYvCK,EAAAA,eAAe,EAAEZ,MAAM,GAClBO,QADY,CACH,8BADG,EAEZM,KAFY,CAEN,CAACX,GAAG,CAAC,UAAD,CAAJ,EAAkB,IAAlB,CAFM,EAEmB,sBAFnB;AAZsB,CAAf,CAArB;AAiBP,OAAO,MAAMY,aAAa,GAAGb,MAAM,GAAGI,KAAT,CAAe;AACxCU,EAAAA,EAAE,EAAEf,MAAM,GACLM,KADD,CACO,6CADP,EAECC,QAFD,CAEU,8BAFV,CADoC;AAIxC;AACA;AACAS,EAAAA,IAAI,EAAEhB,MAAM,GACPO,QADC,CACQ,8BADR,CANkC;AAQxCC,EAAAA,IAAI,EAAER,MAAM,GACPO,QADC,CACQ,8BADR,CARkC;AAUxCU,EAAAA,IAAI,EAAEjB,MAAM,GACPO,QADC,CACQ,8BADR,CAVkC;AAYxCW,EAAAA,MAAM,EAAElB,MAAM,GACTO,QADG,CACM,8BADN;AAZgC,CAAf,CAAtB;AAgBP,OAAO,MAAMY,WAAW,GAAGlB,MAAM,GAAGI,KAAT,CAAe;AACtCe,EAAAA,QAAQ,EAAEpB,MAAM,GACXO,QADK,CACI,8BADJ,CAD4B;AAGtC;AACA;AACAE,EAAAA,QAAQ,EAAET,MAAM,GACXO,QADK,CACI,8BADJ;AAL4B,CAAf,CAApB","sourcesContent":["import { string, object, ref } from 'yup';\r\nimport XRegExp from 'xregexp';\r\n\r\nexport const SignupSchema = object().shape({\r\n    email: string()\r\n        .email('This field should be a valid email address.')\r\n        .required('This field must not be empty'),\r\n    // .matches(/^.{1,64}@/, 'The part before @ of the email can be maximum 64 characters.')\r\n    // .matches(/^.*[a-z]+.*@/, 'This field should be a valid email address.'),\r\n    role: string()\r\n        .required('This field must not be empty'),\r\n    password: string()\r\n        .min(8, 'This field must be at least 8 characters long')\r\n        .max(50, 'This field must be at most 50 characters long')\r\n        .required('This field must not be empty'),\r\n    confirmPassword: string()\r\n        .required('This field must not be empty')\r\n        .oneOf([ref('password'), null], 'Passwords must match'),\r\n});\r\n\r\nexport const ProfileSchema = object().shape({\r\n    id: string()\r\n        .email('This field should be a valid email address.')\r\n        .required('This field must not be empty'),\r\n    // .matches(/^.{1,64}@/, 'The part before @ of the email can be maximum 64 characters.')\r\n    // .matches(/^.*[a-z]+.*@/, 'This field should be a valid email address.'),\r\n    name: string()\r\n        .required('This field must not be empty'),\r\n    role: string()\r\n        .required('This field must not be empty'),\r\n    cgpa: string()\r\n        .required('This field must not be empty'),\r\n    credit: string()\r\n        .required('This field must not be empty')\r\n});\r\n\r\nexport const LoginSchema = object().shape({\r\n    username: string()\r\n        .required('This field must not be empty'),\r\n    // .matches(/^.{1,64}@/, 'The part before @ of the email can be maximum 64 characters.')\r\n    // .matches(/^.*[a-z]+.*@/, 'This field should be a valid email address.'),\r\n    password: string()\r\n        .required('This field must not be empty')\r\n});"]},"metadata":{},"sourceType":"module"}