[{"E:\\AcademicAdvisingSystem\\client\\src\\index.js":"1","E:\\AcademicAdvisingSystem\\client\\src\\App.js":"2","E:\\AcademicAdvisingSystem\\client\\src\\reportWebVitals.js":"3","E:\\AcademicAdvisingSystem\\client\\src\\components\\Login.js":"4","E:\\AcademicAdvisingSystem\\client\\src\\components\\Profile.js":"5","E:\\AcademicAdvisingSystem\\client\\src\\store\\rootReducer.js":"6","E:\\AcademicAdvisingSystem\\client\\src\\components\\Signup.js":"7","E:\\AcademicAdvisingSystem\\client\\src\\schemas\\schemas.js":"8","E:\\AcademicAdvisingSystem\\client\\src\\components\\SetProfile.js":"9","E:\\AcademicAdvisingSystem\\client\\src\\components\\UserManagement.js":"10","E:\\AcademicAdvisingSystem\\client\\src\\components\\StudentDashboard.js":"11","E:\\AcademicAdvisingSystem\\client\\src\\components\\Result.js":"12"},{"size":828,"mtime":1624294718857,"results":"13","hashOfConfig":"14"},{"size":1542,"mtime":1627198368576,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1623162780352,"results":"16","hashOfConfig":"14"},{"size":4021,"mtime":1626533300240,"results":"17","hashOfConfig":"14"},{"size":150,"mtime":1623862380156,"results":"18","hashOfConfig":"14"},{"size":154,"mtime":1623916312041,"results":"19","hashOfConfig":"14"},{"size":4528,"mtime":1624348404256,"results":"20","hashOfConfig":"14"},{"size":1730,"mtime":1625670201418,"results":"21","hashOfConfig":"14"},{"size":5790,"mtime":1625672853394,"results":"22","hashOfConfig":"14"},{"size":1364,"mtime":1624456052442,"results":"23","hashOfConfig":"14"},{"size":8337,"mtime":1627223956386,"results":"24","hashOfConfig":"14"},{"size":15523,"mtime":1625895217968,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},"1tkx0hw",{"filePath":"30","messages":"31","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"29"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"29"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"29"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"29"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"29"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"29"},"E:\\AcademicAdvisingSystem\\client\\src\\index.js",["58","59","60"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { Provider } from 'react-redux'\nimport rootReducer from '../src/store/rootReducer';\nimport { createStore } from 'redux';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["61","62"],"E:\\AcademicAdvisingSystem\\client\\src\\App.js",["63","64","65","66","67","68"],"\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { PublicRoute, PrivateRoute } from \"react-private-public-route\";\nimport Login from './components/Login';\nimport { useState } from \"react\";\nimport Profile from './components/Profile';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux'\nimport { connect } from 'react-redux';\nimport Signup from './components/Signup';\nimport './App.css';\nimport SetProfile from './components/SetProfile';\nimport UserManagement from './components/UserManagement';\nimport StudentDashboard from './components/StudentDashboard';\nimport Result from './components/Result';\n\n\nfunction App(props) {\n\n  return (\n    <Router>\n      <div>\n        <PrivateRoute path=\"/profile\" component={Profile} isAuthenticated={props.isAuthenticated} />\n        <PrivateRoute path=\"/user-management\" component={UserManagement} isAuthenticated={props.isAuthenticated} />\n        <Route path=\"/login\" component={Login} exact />\n        <Route path=\"/signup\" component={Signup} exact />\n        <Route path=\"/set-profile\" component={SetProfile} exact />\n        <Route path=\"/student-dashboard/:id\" component={StudentDashboard} exact />\n        <Route path=\"/result/:id\" component={Result} />\n        <Route path=\"/\" component={Login} exact />\n      </div>\n    </Router>\n  );\n}\n\nconst mapStateToProps = state => ({\n  isAuthenticated: localStorage.getItem('login') === 'true' ? true : false\n});\n\nexport default connect(mapStateToProps)(App);","E:\\AcademicAdvisingSystem\\client\\src\\reportWebVitals.js",[],"E:\\AcademicAdvisingSystem\\client\\src\\components\\Login.js",["69"],"\r\nimport React from 'react'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { LoginSchema } from '../schemas/schemas';\r\nimport { Form, Formik, Field, ErrorMessage, FieldArray } from \"formik\";\r\nimport axios from 'axios';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\n\r\nconst Login = () => {\r\n    const history = useHistory();\r\n    return (\r\n        <div className=\"container-fluid bg-green\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                    <div className=\"signup-form\">\r\n                        <h1 className=\"text-dark\">Log In</h1>\r\n                        <p>Please fill in this form to login!</p>\r\n                        <Formik\r\n                            initialValues={{ username: '', password: '' }}\r\n                            validationSchema={LoginSchema}\r\n                            onSubmit={(values, actions) => {\r\n                                axios.post('/api/users/login', values)\r\n                                    .then((x) => {\r\n                                        toast.success(x.data.message, {\r\n                                            position: \"top-right\",\r\n                                            autoClose: 5000,\r\n                                            hideProgressBar: false\r\n                                        });\r\n                                        actions.resetForm();\r\n                                        localStorage.setItem('login', 'true');\r\n                                        localStorage.setItem('username', values.username);\r\n\r\n\r\n                                        if (x.data.user.role === 'admin') {\r\n                                            history.push('/user-management');\r\n                                        }\r\n\r\n                                        if (x.data.user.role === 'student') {\r\n                                            history.push('/user-management');\r\n                                        }\r\n\r\n\r\n                                    })\r\n                                    .catch((err) => {\r\n                                        toast.error(err.response.data, {\r\n                                            position: \"top-right\",\r\n                                            autoClose: 5000,\r\n                                            hideProgressBar: false\r\n                                        });\r\n\r\n                                    })\r\n                                    .finally(() => {\r\n                                        actions.setSubmitting(false);\r\n                                    });\r\n                            }}\r\n                        >\r\n                            {props => (\r\n                                <Form onSubmit={props.handleSubmit}>\r\n                                    <Field type=\"text\" className=\"form-control\" name=\"username\" placeholder=\"Username\" />\r\n                                    <div className=\"invalid-feedback\">\r\n                                        <ErrorMessage\r\n                                            name=\"username\"\r\n                                        />\r\n                                    </div>\r\n                                    <Field type=\"password\" className=\"form-control\" name=\"password\" placeholder=\"Password\" />\r\n                                    <div className=\"invalid-feedback\">\r\n                                        <ErrorMessage\r\n                                            name=\"password\"\r\n                                        />\r\n                                    </div>\r\n\r\n                                    <button type=\"submit\" className=\"btn btn-dark text-white\">Submit</button>\r\n                                </Form>\r\n                            )}\r\n                        </Formik>\r\n                        <ToastContainer />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;\r\n\r\n","E:\\AcademicAdvisingSystem\\client\\src\\components\\Profile.js",[],"E:\\AcademicAdvisingSystem\\client\\src\\store\\rootReducer.js",[],"E:\\AcademicAdvisingSystem\\client\\src\\components\\Signup.js",["70","71"],"import React from 'react'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { SignupSchema } from '../schemas/schemas';\r\nimport { Form, Formik, Field, ErrorMessage, FieldArray } from \"formik\";\r\nimport axios from 'axios';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst Signup = () => {\r\n    return (\r\n        <div className=\"container-fluid bg-green\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                    <div className=\"signup-form\">\r\n                        <h1 className=\"text-dark\">Sign Up</h1>\r\n                        <p>Please fill in this form to create an account!</p>\r\n                        <Formik\r\n                            initialValues={{ email: '', role: '', password: '', confirmPassword: '' }}\r\n                            validationSchema={SignupSchema}\r\n                            onSubmit={(values, actions) => {\r\n                                axios.post('/api/users', values)\r\n                                    .then((x) => {\r\n                                        toast.success(x.data.message, {\r\n                                            position: \"top-right\",\r\n                                            autoClose: 5000,\r\n                                            hideProgressBar: false\r\n                                        });\r\n                                        actions.resetForm();\r\n\r\n\r\n                                    })\r\n                                    .catch((err) => {\r\n                                        toast.error(err.response.data, {\r\n                                            position: \"top-right\",\r\n                                            autoClose: 5000,\r\n                                            hideProgressBar: false\r\n                                        });\r\n\r\n                                    })\r\n                                    .finally(() => {\r\n                                        actions.setSubmitting(false);\r\n                                    });\r\n\r\n                            }}\r\n                        >\r\n                            {props => (\r\n                                <Form onSubmit={props.handleSubmit}>\r\n                                    <Field type=\"email\" className=\"form-control\" name=\"email\" placeholder=\"Email\" />\r\n                                    <div className=\"invalid-feedback\">\r\n                                        <ErrorMessage\r\n                                            name=\"email\"\r\n                                        />\r\n                                    </div>\r\n                                    <Field className=\"form-control\" name=\"role\" as=\"select\">\r\n                                        <option value=\"\" disabled>--Select role--</option>\r\n                                        <option value=\"student\">Student</option>\r\n                                        <option value=\"faculty\">Faculty</option>\r\n                                    </Field>\r\n                                    <div className=\"invalid-feedback\">\r\n                                        <ErrorMessage\r\n                                            name=\"role\"\r\n                                        />\r\n                                    </div>\r\n                                    <Field type=\"password\" className=\"form-control\" name=\"password\" placeholder=\"Password\" />\r\n                                    <div className=\"invalid-feedback\">\r\n                                        <ErrorMessage\r\n                                            name=\"password\"\r\n                                        />\r\n                                    </div>\r\n                                    <Field type=\"password\" className=\"form-control\" name=\"confirmPassword\" placeholder=\"Confirm Password\" />\r\n                                    <div className=\"invalid-feedback\">\r\n                                        <ErrorMessage\r\n                                            name=\"confirmPassword\"\r\n                                        />\r\n                                    </div>\r\n\r\n                                    <button type=\"submit\" className=\"btn btn-dark text-white\">Submit</button>\r\n                                </Form>\r\n                            )}\r\n                        </Formik>\r\n                        <ToastContainer />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Signup;\r\n","E:\\AcademicAdvisingSystem\\client\\src\\schemas\\schemas.js",["72"],"import { string, object, ref } from 'yup';\r\nimport XRegExp from 'xregexp';\r\n\r\nexport const SignupSchema = object().shape({\r\n    email: string()\r\n        .email('This field should be a valid email address.')\r\n        .required('This field must not be empty'),\r\n    // .matches(/^.{1,64}@/, 'The part before @ of the email can be maximum 64 characters.')\r\n    // .matches(/^.*[a-z]+.*@/, 'This field should be a valid email address.'),\r\n    role: string()\r\n        .required('This field must not be empty'),\r\n    password: string()\r\n        .min(8, 'This field must be at least 8 characters long')\r\n        .max(50, 'This field must be at most 50 characters long')\r\n        .required('This field must not be empty'),\r\n    confirmPassword: string()\r\n        .required('This field must not be empty')\r\n        .oneOf([ref('password'), null], 'Passwords must match'),\r\n});\r\n\r\nexport const ProfileSchema = object().shape({\r\n    id: string()\r\n        .required('This field must not be empty'),\r\n    name: string()\r\n        .required('This field must not be empty'),\r\n    role: string()\r\n        .required('This field must not be empty'),\r\n    cgpa: string()\r\n        .required('This field must not be empty'),\r\n    credit: string()\r\n        .required('This field must not be empty'),\r\n    dept: string()\r\n        .required('This field must not be empty')\r\n});\r\n\r\nexport const LoginSchema = object().shape({\r\n    username: string()\r\n        .required('This field must not be empty'),\r\n    // .matches(/^.{1,64}@/, 'The part before @ of the email can be maximum 64 characters.')\r\n    // .matches(/^.*[a-z]+.*@/, 'This field should be a valid email address.'),\r\n    password: string()\r\n        .required('This field must not be empty')\r\n});","E:\\AcademicAdvisingSystem\\client\\src\\components\\SetProfile.js",["73"],"\r\nimport React from 'react'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ProfileSchema } from '../schemas/schemas';\r\nimport { Form, Formik, Field, ErrorMessage, FieldArray } from \"formik\";\r\nimport axios from 'axios';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst SetProfile = () => {\r\n    const history = useHistory();\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                    <div className=\"profile-form\">\r\n                        <h1 className=\"text-dark\">Set Profile</h1>\r\n                        <p>Please fill in this form to set your profile!</p>\r\n                        <Formik\r\n                            initialValues={{ id: '', name: '', role: '', cgpa: '', dept: '', credit: '' }}\r\n                            validationSchema={ProfileSchema}\r\n                            onSubmit={(values, actions) => {\r\n                                if (values.role === 'student') {\r\n\r\n                                    axios.post('/api/students', values)\r\n                                        .then((x) => {\r\n\r\n                                            toast.success(x.data.message, {\r\n                                                position: \"top-right\",\r\n                                                autoClose: 5000,\r\n                                                hideProgressBar: false\r\n                                            });\r\n\r\n                                            setInterval(() => {\r\n                                                history.push(`/result/${values.id}`);\r\n                                            }, 3000);\r\n                                            actions.resetForm();\r\n\r\n\r\n\r\n                                        })\r\n                                        .catch((err) => {\r\n                                            toast.error(err.response.data, {\r\n                                                position: \"top-right\",\r\n                                                autoClose: 5000,\r\n                                                hideProgressBar: false\r\n                                            });\r\n\r\n                                        })\r\n\r\n\r\n                                }\r\n\r\n                                actions.setSubmitting(false);\r\n                            }}\r\n                        >\r\n                            {props => (\r\n                                <Form onSubmit={props.handleSubmit}>\r\n                                    <Field type=\"text\" className=\"form-control\" name=\"id\" placeholder=\"ID\" />\r\n                                    <div className=\"invalid-feedback\">\r\n                                        <ErrorMessage\r\n                                            name=\"id\"\r\n                                        />\r\n                                    </div>\r\n                                    <Field type=\"text\" className=\"form-control\" name=\"name\" placeholder=\"Full Name\" />\r\n                                    <div className=\"invalid-feedback\">\r\n                                        <ErrorMessage\r\n                                            name=\"name\"\r\n                                        />\r\n                                    </div>\r\n                                    <Field className=\"form-control\" name=\"role\" as=\"select\">\r\n                                        <option value=\"\" disabled>--Select role--</option>\r\n                                        <option value=\"student\" onClick={() => { props.setFieldValue('cgpa', 'null'); props.setFieldValue('credit', 'null') }}>Student</option>\r\n                                        <option value=\"faculty\" onClick={() => { props.setFieldValue('cgpa', ''); props.setFieldValue('credit', '') }}>Faculty</option>\r\n                                    </Field>\r\n                                    {props.values.role === 'student' &&\r\n                                        <>\r\n                                            <Field type=\"text\" className=\"form-control\" name=\"cgpa\" placeholder=\"CGPA\" />\r\n                                            <div className=\"invalid-feedback\">\r\n                                                <ErrorMessage\r\n                                                    name=\"cgpa\"\r\n                                                />\r\n                                            </div>\r\n                                            <Field type=\"text\" className=\"form-control\" name=\"credit\" placeholder=\"Completed Credit\" />\r\n                                            <div className=\"invalid-feedback\">\r\n                                                <ErrorMessage\r\n                                                    name=\"credit\"\r\n                                                />\r\n                                            </div>\r\n                                        </>\r\n                                    }\r\n                                    <Field type=\"text\" className=\"form-control\" name=\"dept\" placeholder=\"Department\" />\r\n                                    <div className=\"invalid-feedback\">\r\n                                        <ErrorMessage\r\n                                            name=\"dept\"\r\n                                        />\r\n                                    </div>\r\n\r\n                                    <button type=\"submit\" className=\"btn btn-dark text-white\">Submit</button>\r\n                                </Form>\r\n                            )}\r\n                        </Formik>\r\n                    </div>\r\n                </div>\r\n                <ToastContainer />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SetProfile;\r\n\r\n","E:\\AcademicAdvisingSystem\\client\\src\\components\\UserManagement.js",[],"E:\\AcademicAdvisingSystem\\client\\src\\components\\StudentDashboard.js",["74","75","76","77","78"],"E:\\AcademicAdvisingSystem\\client\\src\\components\\Result.js",["79","80","81","82"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from 'axios';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { LoginSchema } from '../schemas/schemas';\r\nimport { Form, Formik, Field, ErrorMessage, FieldArray } from \"formik\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\n\r\nexport default function Result() {\r\n    const [courses, setCourses] = useState([]);\r\n    const [student, setStudent] = useState(null);\r\n    const { id } = useParams();\r\n\r\n    const getStudentInfo = () => {\r\n        axios.get(`/api/students/${id}`)\r\n            .then((x) => {\r\n                setStudent(x.data);\r\n            })\r\n            .catch((err) => {\r\n                // toast.error(err.response.data, {\r\n                //     position: \"top-right\",\r\n                //     autoClose: 5000,\r\n                //     hideProgressBar: false\r\n                // });\r\n\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        console.log(id);\r\n        axios.get('/api/courses')\r\n            .then((x) => {\r\n                setCourses(x.data);\r\n            })\r\n            .catch((err) => {\r\n                // toast.error(err.response.data, {\r\n                //     position: \"top-right\",\r\n                //     autoClose: 5000,\r\n                //     hideProgressBar: false\r\n                // });\r\n\r\n            });\r\n        if (id) getStudentInfo(id);\r\n\r\n    }, []);\r\n    return (\r\n        <div className=\"container\">\r\n            {student &&\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-6\">\r\n                        <h1 className=\"text-dark\">Result</h1>\r\n                        <p>Please fill in this form to set your result!</p>\r\n                        {courses && courses.length && courses.length > 0 &&\r\n                            <Formik\r\n                                initialValues={{ course: '', action: '', gpa: '' }}\r\n                                // validationSchema={LoginSchema}\r\n                                onSubmit={(values, actions) => {\r\n                                    if (values.action === 'add') {\r\n                                        const crs = courses.find(x => x.id === values.course);\r\n                                        if (student.result.find(x => x.id === values.course)) {\r\n                                            toast.error(\"Already added\", {\r\n                                                position: \"top-right\",\r\n                                                autoClose: 5000,\r\n                                                hideProgressBar: false\r\n                                            });\r\n                                            actions.resetForm();\r\n                                        }\r\n                                        else {\r\n                                            const result = student.result;\r\n                                            result.push({\r\n                                                id: crs.id,\r\n                                                name: crs.name,\r\n                                                group: crs.group,\r\n                                                gpa: values.gpa\r\n                                            });\r\n                                            const newInfo = { ...student, result: result };\r\n\r\n                                            axios.put(`/api/students/${id}`, newInfo)\r\n                                                .then((x) => {\r\n                                                    toast.success(\"Course added successfully\", {\r\n                                                        position: \"top-right\",\r\n                                                        autoClose: 5000,\r\n                                                        hideProgressBar: false\r\n                                                    });\r\n\r\n                                                })\r\n                                                .catch((err) => {\r\n                                                    toast.error(\"Course add failed\", {\r\n                                                        position: \"top-right\",\r\n                                                        autoClose: 5000,\r\n                                                        hideProgressBar: false\r\n                                                    });\r\n\r\n                                                })\r\n                                                .finally(() => {\r\n                                                    if (id) getStudentInfo(id);\r\n                                                    actions.resetForm();\r\n                                                });\r\n                                        }\r\n                                    }\r\n                                    else if (values.action === 'update') {\r\n                                        if (!student.result.find(x => x.id === values.course)) {\r\n                                            toast.error(\"No course found for update\", {\r\n                                                position: \"top-right\",\r\n                                                autoClose: 5000,\r\n                                                hideProgressBar: false\r\n                                            });\r\n                                            actions.resetForm();\r\n                                        }\r\n                                        else {\r\n                                            const rst = student.result;\r\n                                            const ind = student.result.findIndex(x => x.id === values.course);\r\n                                            rst[ind] = {\r\n                                                ...rst[ind],\r\n                                                gpa: values.gpa\r\n                                            }\r\n                                            const newInfo = { ...student, result: rst };\r\n\r\n                                            axios.put(`/api/students/${id}`, newInfo)\r\n                                                .then((x) => {\r\n                                                    toast.success(\"Course updated successfully\", {\r\n                                                        position: \"top-right\",\r\n                                                        autoClose: 5000,\r\n                                                        hideProgressBar: false\r\n                                                    });\r\n\r\n                                                })\r\n                                                .catch((err) => {\r\n                                                    toast.error(\"Course update failed\", {\r\n                                                        position: \"top-right\",\r\n                                                        autoClose: 5000,\r\n                                                        hideProgressBar: false\r\n                                                    });\r\n\r\n                                                })\r\n                                                .finally(() => {\r\n                                                    if (id) getStudentInfo(id);\r\n                                                    actions.resetForm();\r\n                                                });\r\n                                        }\r\n                                    }\r\n\r\n                                    else {\r\n                                        if (!student.result.find(x => x.id === values.course)) {\r\n                                            toast.error(\"No course found for delete\", {\r\n                                                position: \"top-right\",\r\n                                                autoClose: 5000,\r\n                                                hideProgressBar: false\r\n                                            });\r\n                                            actions.resetForm();\r\n                                        }\r\n                                        else {\r\n                                            const rst = student.result;\r\n                                            const ind = student.result.findIndex(x => x.id === values.course);\r\n                                            rst.splice(ind, 1);\r\n                                            const newInfo = { ...student, result: rst };\r\n\r\n                                            axios.put(`/api/students/${id}`, newInfo)\r\n                                                .then((x) => {\r\n                                                    toast.success(\"Course deleted successfully\", {\r\n                                                        position: \"top-right\",\r\n                                                        autoClose: 5000,\r\n                                                        hideProgressBar: false\r\n                                                    });\r\n\r\n                                                })\r\n                                                .catch((err) => {\r\n                                                    toast.error(\"Course delete failed\", {\r\n                                                        position: \"top-right\",\r\n                                                        autoClose: 5000,\r\n                                                        hideProgressBar: false\r\n                                                    });\r\n\r\n                                                })\r\n                                                .finally(() => {\r\n                                                    if (id) getStudentInfo(id);\r\n                                                    actions.resetForm();\r\n                                                });\r\n                                        }\r\n                                    }\r\n\r\n\r\n                                    actions.setSubmitting(false);\r\n                                }}\r\n                            >\r\n                                {props => (\r\n                                    <Form onSubmit={props.handleSubmit}>\r\n                                        <Field className=\"form-control\" name=\"course\" as=\"select\">\r\n                                            <option value=\"\" disabled>--Select Course--</option>\r\n                                            {courses && courses.map(x => (\r\n                                                <option value={x.id} key={x.id}>{x.id}</option>\r\n                                            ))}\r\n                                        </Field>\r\n                                        {\r\n                                            props.values.course !== '' &&\r\n                                            <div className=\"border border-light p-2 mb-2 rounded bg-card\">\r\n                                                <h6>Course Info</h6>\r\n                                                <p className=\"m-0\"><span className=\"font-weight-bold\">ID:  </span>{props.values.course}</p>\r\n                                                <p className=\"m-0\"><span className=\"font-weight-bold\">Name:  </span>{courses.find(x => x.id === props.values.course).name}</p>\r\n                                                <p className=\"m-0\"><span className=\"font-weight-bold\">Group:  </span>{courses.find(x => x.id === props.values.course).group}</p>\r\n                                                <p className=\"m-0\"><span className=\"font-weight-bold\">Credit:  </span>{courses.find(x => x.id === props.values.course).credit}</p>\r\n                                                <p className=\"m-0\"><span className=\"font-weight-bold\">Corequisite:  </span>{courses.find(x => x.id === props.values.course).corequisite || 'None'}</p>\r\n                                                <p className=\"m-0\"><span className=\"font-weight-bold\">Prerequisite:  </span>\r\n                                                    {courses.find(x => x.id === props.values.course).prequisites.length > 0 ?\r\n                                                        ((courses.find(x => x.id === props.values.course).prequisites).map((y, ind) => (\r\n\r\n                                                            <span key={ind}>{y}{ind !== courses.find(x => x.id === props.values.course).prequisites.length - 1 ? ',' : ''}</span>\r\n                                                        ))) : <span>None</span>}</p>\r\n                                            </div>\r\n\r\n                                        }\r\n                                        <Field className=\"form-control\" name=\"action\" as=\"select\">\r\n                                            <option value=\"\" disabled>--Select Action--</option>\r\n                                            <option value=\"add\">Add</option>\r\n                                            <option value=\"update\">Update</option>\r\n                                            <option value=\"delete\">Delete</option>\r\n                                        </Field>\r\n                                        <Field type=\"text\" className=\"form-control\" name=\"gpa\" placeholder=\"GPA\" />\r\n                                        <div className=\"invalid-feedback\">\r\n                                            <ErrorMessage\r\n                                                name=\"gpa\"\r\n                                            />\r\n                                        </div>\r\n\r\n                                        <button type=\"submit\" className=\"btn btn-dark text-white\">Submit</button>\r\n                                    </Form>\r\n                                )}\r\n                            </Formik>\r\n                        }\r\n                    </div>\r\n                    <div className=\"col-md-6\">\r\n                        <p className=\"mb-0\"><span className=\"font-weight-bold\">Name: </span>{student.name}</p>\r\n                        <p><span className=\"font-weight-bold\">ID: </span>{student.id}</p>\r\n                        <table className=\"table table-striped\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th >Course ID</th>\r\n                                    <th >Course Name</th>\r\n                                    <th >Group</th>\r\n                                    <th>GPA</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {student.result.map((x, ind) => (\r\n                                    <tr>\r\n                                        <th>{x.id}</th>\r\n                                        <td> {x.name}</td>\r\n                                        <td>{x.group}</td>\r\n                                        <td>{x.gpa}</td>\r\n                                    </tr>\r\n                                ))\r\n\r\n                                }\r\n                                {student.result.length === 0 &&\r\n                                    <tr><td>No Course Found</td></tr>}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            }\r\n            {\r\n                student === null &&\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-12\">No student found!</div>\r\n                </div>\r\n            }\r\n            <ToastContainer />\r\n        </div >\r\n    )\r\n}\r\n",{"ruleId":"83","severity":1,"message":"84","line":6,"column":10,"nodeType":"85","messageId":"86","endLine":6,"endColumn":23},{"ruleId":"83","severity":1,"message":"87","line":6,"column":25,"nodeType":"85","messageId":"86","endLine":6,"endColumn":30},{"ruleId":"83","severity":1,"message":"88","line":6,"column":32,"nodeType":"85","messageId":"86","endLine":6,"endColumn":38},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"83","severity":1,"message":"93","line":2,"column":17,"nodeType":"85","messageId":"86","endLine":2,"endColumn":26},{"ruleId":"83","severity":1,"message":"88","line":3,"column":42,"nodeType":"85","messageId":"86","endLine":3,"endColumn":48},{"ruleId":"83","severity":1,"message":"94","line":4,"column":10,"nodeType":"85","messageId":"86","endLine":4,"endColumn":21},{"ruleId":"83","severity":1,"message":"95","line":6,"column":10,"nodeType":"85","messageId":"86","endLine":6,"endColumn":18},{"ruleId":"83","severity":1,"message":"96","line":8,"column":10,"nodeType":"85","messageId":"86","endLine":8,"endColumn":21},{"ruleId":"83","severity":1,"message":"97","line":9,"column":10,"nodeType":"85","messageId":"86","endLine":9,"endColumn":18},{"ruleId":"83","severity":1,"message":"98","line":5,"column":45,"nodeType":"85","messageId":"86","endLine":5,"endColumn":55},{"ruleId":"83","severity":1,"message":"99","line":2,"column":10,"nodeType":"85","messageId":"86","endLine":2,"endColumn":20},{"ruleId":"83","severity":1,"message":"98","line":4,"column":45,"nodeType":"85","messageId":"86","endLine":4,"endColumn":55},{"ruleId":"83","severity":1,"message":"100","line":2,"column":8,"nodeType":"85","messageId":"86","endLine":2,"endColumn":15},{"ruleId":"83","severity":1,"message":"98","line":5,"column":45,"nodeType":"85","messageId":"86","endLine":5,"endColumn":55},{"ruleId":"83","severity":1,"message":"99","line":3,"column":10,"nodeType":"85","messageId":"86","endLine":3,"endColumn":20},{"ruleId":"83","severity":1,"message":"101","line":4,"column":10,"nodeType":"85","messageId":"86","endLine":4,"endColumn":21},{"ruleId":"83","severity":1,"message":"102","line":5,"column":31,"nodeType":"85","messageId":"86","endLine":5,"endColumn":43},{"ruleId":"83","severity":1,"message":"98","line":5,"column":45,"nodeType":"85","messageId":"86","endLine":5,"endColumn":55},{"ruleId":"103","severity":1,"message":"104","line":49,"column":8,"nodeType":"105","endLine":49,"endColumn":10,"suggestions":"106"},{"ruleId":"83","severity":1,"message":"99","line":3,"column":10,"nodeType":"85","messageId":"86","endLine":3,"endColumn":20},{"ruleId":"83","severity":1,"message":"101","line":4,"column":10,"nodeType":"85","messageId":"86","endLine":4,"endColumn":21},{"ruleId":"83","severity":1,"message":"98","line":5,"column":45,"nodeType":"85","messageId":"86","endLine":5,"endColumn":55},{"ruleId":"103","severity":1,"message":"104","line":48,"column":8,"nodeType":"105","endLine":48,"endColumn":10,"suggestions":"107"},"no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","'Route' is defined but never used.","'Switch' is defined but never used.","no-native-reassign",["108"],"no-negated-in-lhs",["109"],"'Component' is defined but never used.","'PublicRoute' is defined but never used.","'useState' is defined but never used.","'createStore' is defined but never used.","'Provider' is defined but never used.","'FieldArray' is defined but never used.","'useHistory' is defined but never used.","'XRegExp' is defined but never used.","'LoginSchema' is defined but never used.","'ErrorMessage' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getStudentInfo' and 'id'. Either include them or remove the dependency array.","ArrayExpression",["110"],["111"],"no-global-assign","no-unsafe-negation",{"desc":"112","fix":"113"},{"desc":"112","fix":"114"},"Update the dependencies array to be: [getStudentInfo, id]",{"range":"115","text":"116"},{"range":"117","text":"116"},[1557,1559],"[getStudentInfo, id]",[1485,1487]]